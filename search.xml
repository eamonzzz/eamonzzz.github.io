<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用GotHub+jsDelivr 制作免费图床</title>
      <link href="/posts/66dce0e3.html"/>
      <url>/posts/66dce0e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="获得github的token"><a href="#获得github的token" class="headerlink" title="获得github的token"></a>获得github的token</h1><ol><li><p>点击个人头像</p></li><li><p>选择设置</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/eamonzzz/my-picture-bed/blog-images/20200517182620.png" alt=""></p><ol start="3"><li><p>进入 <code>Developer settings</code> </p></li><li><p>选择 <code>Personal access tokens</code> ，然后点击 <code>Generate new token</code> </p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/eamonzzz/my-picture-bed/blog-images/20200517174434.png" alt=""></p><ol start="5"><li>生成时，权限设置如下</li></ol><p><img src="https://cdn.jsdelivr.net/gh/eamonzzz/my-picture-bed/blog-images/20200517174524.png" alt="img"></p><ol start="6"><li>生成之后，复制该 <code>token</code> </li></ol><h1 id="下载图片上传工具"><a href="#下载图片上传工具" class="headerlink" title="下载图片上传工具"></a>下载图片上传工具</h1><p>推荐使用 <code>PicGo</code> </p><h1 id="设置github图床"><a href="#设置github图床" class="headerlink" title="设置github图床"></a>设置github图床</h1><p>注意：因为某些原因，上传到 <code>github</code>  的图片是不能直接访问的，所以需要绕一步，这里选择免费的 <code>jsdelivr</code> <code>CDN</code>加速。网址：<a href="https://www.jsdelivr.com/?docs=gh" target="_blank" rel="noopener">jsdelivr.com</a></p><p>为了在上传完成时，<code>picgo</code> 能够自动将访问连接设置成 <code>CDN</code> 加速后的连接，这里需要设置自定义域名，格式为： <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code> ，如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/eamonzzz/my-picture-bed/blog-images/20200517181859.png" alt="img"></p><h1 id="上传测试"><a href="#上传测试" class="headerlink" title="上传测试"></a>上传测试</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/239945/1589707209169-81ea0398-33a1-4146-b6e7-03248adb18e6.png#align=left&amp;display=inline&amp;height=1956&amp;margin=%5Bobject%20Object%5D&amp;name=&amp;originHeight=1956&amp;originWidth=2548&amp;size=0&amp;status=done&amp;style=none&amp;width=2548" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/eamonzzz/my-picture-bed/blog-images/20200517182027.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-原型模式</title>
      <link href="/posts/92a38b2.html"/>
      <url>/posts/92a38b2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原型模式的核心和目的是拷贝<strong>原型</strong>对象，以系统中已经存在的一个对象为原型，直接基于二进制流进行拷贝，无需再经历耗时的对象初始化过程（不调用构造器），从而提升了性能，特别是当创建的对象比较耗时时，可以使用原型模式对其进行克隆（一般是基于二进制流的复制），来避免初始化过程，大大提高对象的创建速度。</p></blockquote><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>原型模式</strong>（Prototype Pattern）属于<strong>创建型</strong>模式，是指通过<strong>现有</strong>的原型实例来指定创建对象的种类，然后通过<strong>这个原型对象</strong>提供的<strong>复制</strong>方法来创建更多<strong>新的对象</strong>。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 创建型模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-委派模式</title>
      <link href="/posts/a77bbab9.html"/>
      <url>/posts/a77bbab9.html</url>
      
        <content type="html"><![CDATA[<p>首先委派模式不属于23种设计模式。</p><p>所谓委派，个人理解是：将为达到最终结果的事情交给其他人或中间人来干，我只要最终结果，其他的事情，由我委派的人来安排。</p><a id="more"></a><p>更直白的表达就是，比如，我们想要盖一栋楼房，盖完之后我要刷漆，这些事情我自己肯定不能做，所以我这时候就会去找一个“包工头”来帮我完成这件事情，我只要告诉“包工头”我要盖房子、我要给房子刷漆等命令，其他的事情我不管，最终能够交付给我这个刷完漆房子就行。那么“包工头”也不可能自己来干的吧，这个时候他就会去找人，盖楼房的、刷漆的等等；然后叫他们来干这件事情，干完之后，交付给我一个刷完漆的房子即可。这个过程也就是委派模式的一个体现。</p><p>委派模式看上去和我们之前所说的“静态模式”非常相似，它可以说是一种特殊情况的静态代理的全权代理。但是也是有区别的，“静态代理”更注重的是过程，而“委派模式”只注重“结果”。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>我们现在就以上述中的例子，用代码来实现以下：</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>先创建工人抽象类接口，他们都具有干活的功能 <code>Worker</code> ：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象 工人 * * @author EamonZzz * @date 2019-10-26 15:09 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 干活     *     * @param command 听命令干活     */</span>    <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后有一个工人A，砌砖砌的很好，很适合盖楼，<code>WorkerA</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 工人A 他砌砖砌的很好，所以叫来盖楼比较好 * * @author EamonZzz * @date 2019-10-26 15:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkerA</span> <span class="token keyword">implements</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是工人A，包工头叫我 "</span> <span class="token operator">+</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后再来一个工人B，他是专业刷漆的 <code>WorkerB</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 工人A 他砌砖砌的很好，所以叫来盖楼比较好 * * @author EamonZzz * @date 2019-10-26 15:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkerA</span> <span class="token keyword">implements</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是工人A，包工头叫我 "</span> <span class="token operator">+</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再来找一个包工头，包工头也是一名工人，但是这个包工头主要是组织工人干活，<code>Contractor</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 包工头(也是一名工人)，承接项目，分配工人 * * @author EamonZzz * @date 2019-10-26 15:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Contractor</span> <span class="token keyword">implements</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Worker<span class="token operator">></span> targets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Worker<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Contractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"盖楼"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WorkerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targets<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"刷漆"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WorkerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 包工头不需要自己干活     * @param command     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span>String command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        targets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后就是有盖楼刷漆的需求的人，<code>Boss</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 我，需要盖楼的人，给包工头下达盖楼、刷漆的命令 * * @author EamonZzz * @date 2019-10-26 15:06:09 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 下达 请求     *     * @param command     * @param contractor     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">command</span><span class="token punctuation">(</span>String command<span class="token punctuation">,</span> Contractor contractor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        contractor<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来看一下测试类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author EamonZzz * @date 2019-10-26 15:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BossTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Boss boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boss<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"盖楼"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Contractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boss<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"刷漆"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Contractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终结果：</p><pre class=" language-java"><code class="language-java">我是工人A，包工头叫我 盖楼我是工人B，包工头叫我 刷漆</code></pre><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="https://user-gold-cdn.xitu.io/2019/10/28/16e100ec3509a334?w=1298&amp;h=1048&amp;f=png&amp;s=310303" alt=""></p><p>这个过程就模拟完毕，Boss 给包工头下达命令说我要盖楼，然后包工头就去找能够盖楼的人去盖楼；然后下达命令说，我的楼房需要刷漆了，包工头就去找刷漆的人来干这件事情。</p><h1 id="SpringMVC中使用委派模式的场景"><a href="#SpringMVC中使用委派模式的场景" class="headerlink" title="SpringMVC中使用委派模式的场景"></a>SpringMVC中使用委派模式的场景</h1><p>在<code>SpringMVC</code>中，也有委派模式的身影，比如我们最常见的 <code>DispatcherServlet</code> 它用来将我们前端<code>URL</code>传过来的请求，分发到相应的 <code>Controller</code> 控制器来处理请求，那么它是怎么来完成这一过程的呢？</p><p>其实结合上面的实例场景就不难分析出来原理。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于“委派模式”和“静态代理模式”的区别，在文章开头已经提到过，“静态代理”注重过程，代理类和被代理类都要去实现一个接口；而“委派模式”更注重结果，<code>Boss</code>不需要实现<code>Worker</code> 这个接口。就拿敲代码这个能力来说，“静态代理”的<code>Boss</code>类需要会敲代码，而“委派模式”中的<code>Boss</code>则不需要会敲代码。</p><p>源码地址：<a href="https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/main/java/com/eamon/javadesignpatterns/delegate" target="_blank" rel="noopener">https://github.com/eamonzzz/java-advanced/tree/…</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-动态代理原理及模仿JDK Proxy写一个属于自己的动态代理</title>
      <link href="/posts/e9783717.html"/>
      <url>/posts/e9783717.html</url>
      
        <content type="html"><![CDATA[<p><strong>本篇文章代码内容较多，讲的可能会有些粗糙，大家可以选择性阅读。</strong></p><blockquote><p>本篇文章的目的是简单的分析动态代理的原理及模仿<code>JDK Proxy</code>手写一个动态代理以及对几种代理做一个总结。</p></blockquote><a id="more"></a><p>对于代理模式的介绍和讲解，网上已经有很多优质的文章，我这里就不会再过多的介绍了，这里推荐几篇优质的文章作为参考：</p><ol><li><a href="https://juejin.im/post/5af0335c6fb9a07ace58cc8f#comment" target="_blank" rel="noopener">给女朋友讲解什么是代理模式</a></li><li><a href="https://blog.csdn.net/briblue/article/details/73928350" target="_blank" rel="noopener">轻松学，Java 中的代理模式及动态代理</a></li></ol><p>另外，我的 github 仓库对应目录中也有相关的基础示例代码：<a href="https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/main/java/com/eamon/javadesignpatterns/proxy" target="_blank" rel="noopener">https://github.com/eamonzzz/java-advanced…</a></p><h1 id="JDK-Proxy-动态代理"><a href="#JDK-Proxy-动态代理" class="headerlink" title="JDK Proxy 动态代理"></a>JDK Proxy 动态代理</h1><p>动态代理的概念这里就不再阐述了；动态代理相对于静态代理来说，它的功能更加强大，随着业务的扩展，适应性更强。</p><p>在说动态代理原理之前，我们还是来看看动态代理的一般使用。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>本篇文章的使用示例，是以一个最为简单的代理模式的代码为例，相信大家在学习或了解代理模式的时候都有看到或者接触过这些代码。</p><ol><li>先创建一个<code>Subject</code>主体抽象接口：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-09 下午4:06 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>再创建一个真实的主体<code>RealSubject</code>来处理我们的真实的逻辑：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-09 下午4:06 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真实处理逻辑！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>在不修改<code>RealSubject</code>类的情况下，如果我们要实现在执行<code>RealSubject</code>类中<code>request()</code>方法之前或之后执行一段逻辑的话，该怎么实现呢？这就得创建一个代理类，来达到增强原有代码的目的。所以现在创建一个 JDK 动态代理类 <code>RealSubjectJDKDynamicProxy</code> ：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-09 下午4:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubjectJDKDynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被代理对象的引用</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过构造器传入对象引用</span>    <span class="token keyword">public</span> <span class="token function">RealSubjectJDKDynamicProxy</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获得 JDK 动态代理创建的代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代理执行被代理对象的相应方法</span>        Object invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置增强！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>测试代码：</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Subject realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealSubjectJDKDynamicProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubjectJDKDynamicProxy</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>    Subject instance <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>测试结果</li></ol><pre><code>前置增强！真实处理逻辑！后置增强！class com.eamon.javadesignpatterns.proxy.dynamic.jdk.RealSubjectclass com.sun.proxy.$Proxy8</code></pre><p>从结果来看，上面的代码已经达到了我们的<strong>增强</strong>的目的。</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>不知道大家有没有注意到上面的测试代码中，最后两行我将代理之前和代理之后的<code>class</code>对象给打印了出来；并且发现，这两个对象并非同一个，最重要的是，经过代理之后的对象的<code>Subject</code>是<code>com.sun.proxy.$Proxy8</code>而不是<code>com.eamon.javadesignpatterns.proxy.dynamic.jdk.RealSubject</code>或者<code>com.eamon.javadesignpatterns.proxy.dynamic.jdk.Subject</code>，那么这个<code>instance</code>到底是从哪里来？带着这个疑问，我们来通过 JDK Proxy 源码来分析一下：</p><p>我们跟进<code>RealSubjectJDKDynamicProxy</code>类中的<code>Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), this);</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                                          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                          InvocationHandler h<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IllegalArgumentException<span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> intfs <span class="token operator">=</span> interfaces<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkProxyAccess</span><span class="token punctuation">(</span>Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * Look up or generate the designated proxy class.     */</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Invoke its constructor with the designated invocation handler.     */</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">final</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> InvocationHandler ih <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span><span class="token operator">|</span>InstantiationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>发现在<code>newProxyInstance</code>方法中调用了<code>getProxyClass0(loader, intfs)</code>方法，我们跟进去这个方法看一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Generate a proxy class.  Must call the checkProxyAccess method * to perform permission checks before calling this. */</span><span class="token keyword">private</span> <span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                                       Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interfaces<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"interface limit exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If the proxy class defined by the given loader implementing</span>    <span class="token comment" spellcheck="true">// the given interfaces exists, this will simply return the cached copy;</span>    <span class="token comment" spellcheck="true">// otherwise, it will create the proxy class via the ProxyClassFactory</span>    <span class="token keyword">return</span> proxyClassCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码逻辑很简单，做了两个事情：</p><ol><li>检查类的接口数量是否超过<code>65535</code>,接口个数用 2 个 <code>byte</code> 存储，最大支持 <code>65535</code> 个。</li><li>从 <code>proxyClassCache</code> 缓存中去取，从注释中可知，如果缓存没有就会调用<code>ProxyClassFactory</code>去创建。</li></ol><p>我们现在就来简单分析一下<code>proxyClassCache.get(loader, interfaces)</code>里面的逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> P parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expungeStaleEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object cacheKey <span class="token operator">=</span> CacheKey<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> refQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// lazily install the 2nd level valuesMap for the particular cacheKey</span>    ConcurrentMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Supplier<span class="token operator">&lt;</span>V<span class="token operator">>></span> valuesMap <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>valuesMap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConcurrentMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Supplier<span class="token operator">&lt;</span>V<span class="token operator">>></span> oldValuesMap            <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span>                              valuesMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValuesMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            valuesMap <span class="token operator">=</span> oldValuesMap<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// create subKey and retrieve the possible Supplier&lt;V> stored by that</span>    <span class="token comment" spellcheck="true">// subKey from valuesMap</span>    Object subKey <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>subKeyFactory<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Supplier<span class="token operator">&lt;</span>V<span class="token operator">></span> supplier <span class="token operator">=</span> valuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    Factory factory <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里是一个 while（true）</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果创建 factory（这里指ProxyClassFactory） 成功，就调用 factory.get()方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supplier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// supplier might be a Factory or a CacheValue&lt;V> instance</span>            <span class="token comment" spellcheck="true">//</span>            V value <span class="token operator">=</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// else no supplier in cache</span>        <span class="token comment" spellcheck="true">// or a supplier that returned null (could be a cleared CacheValue</span>        <span class="token comment" spellcheck="true">// or a Factory that wasn't successful in installing the CacheValue)</span>        <span class="token comment" spellcheck="true">// lazily construct a Factory</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> subKey<span class="token punctuation">,</span> valuesMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supplier <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            supplier <span class="token operator">=</span> valuesMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>subKey<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>supplier <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// successfully installed Factory</span>                supplier <span class="token operator">=</span> factory<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// else retry with winning supplier</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>valuesMap<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>subKey<span class="token punctuation">,</span> supplier<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// successfully replaced</span>                <span class="token comment" spellcheck="true">// cleared CacheEntry / unsuccessful Factory</span>                <span class="token comment" spellcheck="true">// with our Factory</span>                supplier <span class="token operator">=</span> factory<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// retry with current supplier</span>                supplier <span class="token operator">=</span> valuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码可能有点长，其实逻辑就是为了调用<code>ProxyClassFactory.apply()</code>去生成代理类。我们从<code>while(true)</code>处将代码分割成两个部分来看：</p><ol><li>前半部分，是从缓存中去取<code>ProxyClassFactory</code>，如果创建成功了，则可以取到（缓存中的 key 这里不分析了）</li><li>然后看 <code>while(true)</code> 代码块中的逻辑，<code>if (supplier != null)</code>这个判断，如果缓存中创建了<code>ProxyClassFactory</code>就会执行<code>supplier.get()</code>并且终止循环；如果没有，则会执行<code>new Factory(key, parameter, subKey, valuesMap);</code>去创建<code>factory</code>，然后将其放入缓存<code>supplier</code>中，然后继续循环，这个时候就会执行<code>if (supplier != null)</code>代码块中的逻辑，我们再来分析一下这个代码块里面的代码：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>supplier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// supplier might be a Factory or a CacheValue&lt;V> instance</span>    V value <span class="token operator">=</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>跟进 <code>supplier.get()</code>方法去看一下，我们从上面的分析可以知道这里的<code>supplier</code>其实就是一个<code>Factory</code>，所以我们看<code>Factory</code>的实现，重点看<code>get()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token keyword">implements</span> <span class="token class-name">Supplier</span><span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// serialize access</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment" spellcheck="true">// create new value</span>            V value <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                value <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>valueFactory<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// remove us on failure</span>                    valuesMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>subKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// the only path to reach here is with non-null value</span>            <span class="token keyword">assert</span> value <span class="token operator">!=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// wrap value with CacheValue (WeakReference)</span>            CacheValue<span class="token operator">&lt;</span>V<span class="token operator">></span> cacheValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheValue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// put into reverseMap</span>            reverseMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// try replacing us with CacheValue (this should always succeed)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>valuesMap<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>subKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> cacheValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Should not reach here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// successfully replaced us with new CacheValue -> return the value</span>            <span class="token comment" spellcheck="true">// wrapped by it</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们注意到，代码中的重点是在<code>Objects.requireNonNull(valueFactory.apply(key, parameter));</code>，那这个代码中的<code>valueFactory</code>是什么呢？我们在<code>Proxy</code>中，来看一下<code>proxyClassCache</code>的定义</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> WeakCache<span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span>        proxyClassCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakCache</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClassFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>WeakCache</code>中第二个参数是<code>new ProxyClassFactory()</code> ，再来看一下对应的构造器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">WeakCache</span><span class="token punctuation">(</span>BiFunction<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> P<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> subKeyFactory<span class="token punctuation">,</span>                 BiFunction<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> P<span class="token punctuation">,</span> V<span class="token operator">></span> valueFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subKeyFactory <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>subKeyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>valueFactory <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>valueFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这时候明白了吗？其实 <code>valueFactory</code>就是<code>ProxyClassFactory()</code></p><p>明白了这一点，就来分析一下<code>valueFactory.apply(key, parameter)</code>到底执行了什么？我们直接看<code>ProxyClassFactory</code>的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ProxyClassFactory</span>    <span class="token keyword">implements</span> <span class="token class-name">BiFunction</span><span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// prefix for all proxy class names</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String proxyClassNamePrefix <span class="token operator">=</span> <span class="token string">"$Proxy"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// next number to use for generation of unique proxy class names</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong nextUniqueNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">/*         * Generate the specified proxy class.         */</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxyClassFile <span class="token operator">=</span> ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span>            proxyName<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> accessFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">defineClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> proxyName<span class="token punctuation">,</span>                                proxyClassFile<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> proxyClassFile<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassFormatError</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>纵观全览，不难分析，代码中其实就是在创建<code>$Proxy</code>这个中间代理类，其中<code>byte[] proxyClassFile</code>是代码块中组装完成之后的类的字节码文件数据，通过<code>ProxyGenerator.generateProxyClass()</code>生成；然后通过<code>classloader</code>动态加载字节码，并生成动态代理类的<code>Class</code>实例，并返回。</p><p>我们再跟进<code>ProxyGenerator.generateProxyClass()</code>方法，来看看在生成代理类过程中的处理逻辑，看重点代码：。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateProxyClass</span><span class="token punctuation">(</span><span class="token keyword">final</span> String var0<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1<span class="token punctuation">,</span> <span class="token keyword">int</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ProxyGenerator var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyGenerator</span><span class="token punctuation">(</span>var0<span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var4 <span class="token operator">=</span> var3<span class="token punctuation">.</span><span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> var4<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以发现其代码调用了<code>var3.generateClassFile()</code>去生成<code>Class</code>文件，所以我们跟进<code>generateClassFile()</code>方法，看重点内容：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateClassFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addProxyMethod</span><span class="token punctuation">(</span>hashCodeMethod<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addProxyMethod</span><span class="token punctuation">(</span>equalsMethod<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addProxyMethod</span><span class="token punctuation">(</span>toStringMethod<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interfaces<span class="token punctuation">;</span>    <span class="token keyword">int</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> var3<span class="token punctuation">;</span>    Class <span class="token class-name">var4</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var3 <span class="token operator">&lt;</span> var2<span class="token punctuation">;</span> <span class="token operator">++</span>var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var4 <span class="token operator">=</span> var1<span class="token punctuation">[</span>var3<span class="token punctuation">]</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> var5 <span class="token operator">=</span> var4<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> var6 <span class="token operator">=</span> var5<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var7 <span class="token operator">&lt;</span> var6<span class="token punctuation">;</span> <span class="token operator">++</span>var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Method var8 <span class="token operator">=</span> var5<span class="token punctuation">[</span>var7<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addProxyMethod</span><span class="token punctuation">(</span>var8<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>代码有点长，这里就不全部展开了，有兴趣的朋友可以跟进去详细看一下。从代码中我们大致可以看出来，在生成代理类的过程中，还添加了<code>hashCode、equals、toString</code>这三个方法，然后后面的逻辑就是将代理对象中的所有接口进行迭代，将其所有的方法都重新生成代理方法；然后生成字节码。</p><p>最后再将代理类加载到<code>JVM</code>中。</p><h3 id="看一下JDK-Proxy生成的代理类-Proxy"><a href="#看一下JDK-Proxy生成的代理类-Proxy" class="headerlink" title="看一下JDK Proxy生成的代理类$Proxy"></a>看一下<code>JDK Proxy</code>生成的代理类<code>$Proxy</code></h3><p>我们通过下面这段代码，将<code>$Proxy</code>文件输出到文件：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealSubject realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealSubjectJDKDynamicProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubjectJDKDynamicProxy</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>    Subject instance <span class="token operator">=</span> <span class="token punctuation">(</span>Subject<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxychar<span class="token operator">=</span>  ProxyGenerator<span class="token punctuation">.</span><span class="token function">generateProxyClass</span><span class="token punctuation">(</span><span class="token string">"$Proxy0"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Subject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/eamon.zhang/IdeaProjects/own/java-advanced/01.DesignPatterns/design-patterns/"</span><span class="token operator">+</span>instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>proxychar<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过<code>IDEA</code>工具查看<code>$Proxy0</code>，印证一下我们之前的分析:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy0 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m2<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m0<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token function">Proxy0</span><span class="token punctuation">(</span>InvocationHandler var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>var1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span>  <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            m1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.eamon.javadesignpatterns.proxy.dynamic.jdk.Subject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> var2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>var3<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下<code>JDK Proxy</code>的实现步骤：</p><ol><li>拿到被代理对象的引用，并获取它的所有接口（通过反射）</li><li><code>JDK Proxy</code> 类重新生成一个新的类，同时新的类要实现被代理类的所有实现的接口，还有<code>hashCode、equals、toString</code>这三个方法</li><li>动态生成<code>Java</code>代码，把新加的业务逻辑方法由一定的逻辑代码去调用（在代码中体现）</li><li>编译新生成的<code>Java</code>代码的 <code>.class</code>文件</li><li>重新加载到<code>JVM</code>中运行</li></ol><h2 id="仿真手写-JDK-Proxy"><a href="#仿真手写-JDK-Proxy" class="headerlink" title="仿真手写 JDK Proxy"></a>仿真手写 JDK Proxy</h2><p>在明白了上面的原理之后，其实我们就可以尝试手动来实现一个<code>JDK Proxy</code>：</p><p>我们参照<code>JDK Proxy</code>实现原理分析一下需要动手编写哪些内容：</p><ul><li>首先我们需要有一个代理类<code>MimeProxy</code></li><li>然后从代理类出发，需要有<code>newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), this)</code>这一个方法，方法参数为：<code>(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code>，所以我们需要创建一个<code>ClassLoader</code>、<code>InvocationHandler</code>;</li></ul><p>下面来一步一步创建：</p><ol><li>先创建<code>MimeClassLoader</code>类，继承自<code>ClassLoader</code>，并重写<code>findClass()</code>方法：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-10 下午2:47 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MimeClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MimeClassLoader</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        String classname <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>        String filePath <span class="token operator">=</span> MimeClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"file:///"</span> <span class="token operator">+</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            Path path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>            File file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fileBytes <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>classname<span class="token punctuation">,</span> fileBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> fileBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>创建 <code>MimeInvocationHandler</code> 类：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-10 下午2:46 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MimeInvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Throwable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>创建<code>MimeProxy</code>类，这个类就是用来组装成代理类，并加载到<code>JVM</code>，然后返回这个代理对象：</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-10 下午3:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MimeProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ln <span class="token operator">=</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String semi <span class="token operator">=</span> <span class="token string">";"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Class<span class="token punctuation">,</span> Class<span class="token operator">></span> mappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Class<span class="token punctuation">,</span> Class<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>MimeClassLoader loader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span> MimeInvocationHandler h<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IllegalArgumentException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1. 动态生成 .java 文件</span>            String src <span class="token operator">=</span> <span class="token function">generateSrc</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(src);</span>            <span class="token comment" spellcheck="true">// 2. java 文件输出到磁盘</span>            String filePath <span class="token operator">=</span> MimeProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            System.out.println(filePath);</span>            File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath <span class="token operator">+</span> <span class="token string">"$Proxy8.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            f.deleteOnExit();</span>            FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 把 java 文件编译成 .class 文件</span>            JavaCompiler compiler <span class="token operator">=</span> ToolProvider<span class="token punctuation">.</span><span class="token function">getSystemJavaCompiler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StandardJavaFileManager sjfm <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getStandardFileManager</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">JavaFileObject</span><span class="token operator">></span> iterable <span class="token operator">=</span> sjfm<span class="token punctuation">.</span><span class="token function">getJavaFileObjects</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            JavaCompiler<span class="token punctuation">.</span>CompilationTask task <span class="token operator">=</span> compiler<span class="token punctuation">.</span><span class="token function">getTask</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> sjfm<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">;</span>            task<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sjfm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 4. 把.class 文件加载到jvm</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> proxyClass <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span><span class="token string">"$Proxy8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> proxyClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>MimeInvocationHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5. 返回字节码重组以后的新的代理对象</span>            <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成 代理类     *     * @param interfaces     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">generateSrc</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里使用 StringBuffer 线程安全</span>        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"package "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>semi<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"import "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>semi<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"import java.lang.reflect.*;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"import "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".mimeproxy.MimeInvocationHandler;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"public class $Proxy8 implements "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" {"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"MimeInvocationHandler h;"</span> <span class="token operator">+</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"public $Proxy8(MimeInvocationHandler h) {"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"this.h = h;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuffer paramNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuffer paramValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuffer paramClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String type <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String paramName <span class="token operator">=</span> <span class="token function">toLowerFirstCase</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                paramNames<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>                paramValues<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>                paramClasses<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    paramNames<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    paramValues<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    paramClasses<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"public "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paramNames<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">") {"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"try {"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Method m = interfaces[0].getName().class.getMethod(method.getName()),new Class[]{paramClasses.toString()});</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Method m = "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".class.getMethod(\""</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\", new Class[]{"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>paramClasses<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"});"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// return this.h.invoke(this, m, new Object[]{paramValues}, method.getReturnType());</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">hasReturnValue</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"return "</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getCaseCode</span><span class="token punctuation">(</span><span class="token string">"this.h.invoke(this,m,new Object[]{"</span> <span class="token operator">+</span> paramValues <span class="token operator">+</span> <span class="token string">"})"</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"} catch (Error _ex) {}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"catch (Throwable e) {"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"throw new UndeclaredThrowableException(e);"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getReturnEmptyCode</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ln<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取返回值类型     *     * @param returnClass     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getReturnEmptyCode</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mappings<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>returnClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"return 0;"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>returnClass <span class="token operator">==</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"return null;"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 拼接 invocationHandler 执行代码     *     * @param code     * @param returnClass     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getCaseCode</span><span class="token punctuation">(</span>String code<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mappings<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>returnClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"(("</span> <span class="token operator">+</span> mappings<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>returnClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">")."</span> <span class="token operator">+</span> returnClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Value()"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断是否有返回值     *     * @param clazz     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasReturnValue</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clazz <span class="token operator">!=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 首字母转换为小写     *     * @param src     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">toLowerFirstCase</span><span class="token punctuation">(</span>String src<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样子就编写了一个属于自己的动态代理，当然，代理方法还不完善，只是针对本示例进行了编写，有兴趣的朋友可以试试将其改为更通用的代码。</p><h1 id="CGlib-动态代理"><a href="#CGlib-动态代理" class="headerlink" title="CGlib 动态代理"></a>CGlib 动态代理</h1><p>下面来看一下 CGlib 的动态代理的使用</p><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p>先创建<code>RealSubject</code>类，注意，这个类不用实现任何接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-09 下午4:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真实处理逻辑！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后创建<code>RealSubjectCglibDynamicProxy</code> 代理类，它必须实现<code>MethodInterceptor</code>接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-09 下午4:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubjectCglibDynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过CGLIB动态代理获取代理对象的过程</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要把哪个设置为即将生成的新类父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置回调对象</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object invokeSuper <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invokeSuper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置增强！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置增强！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样，一个简单的<code>CGlib</code>动态代理实现就完成了，我们现在来创建测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RealSubjectCglibDynamicProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubjectCglibDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealSubject instance <span class="token operator">=</span> <span class="token punctuation">(</span>RealSubject<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RealSubject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre class=" language-java"><code class="language-java">前置增强！真实处理逻辑！后置增强！</code></pre><h2 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h2><p>不管是<code>JDK Proxy</code>还是<code>CGlib</code>，他们的核心内容都是去创建代理类，所以我们只要去了解其创建代理类的过程就 OK 了。</p><p>从上面简单的使用示例可以知道，要使用 CGlib 动态代理，代理类必须要实现<code>MethodInterceptor</code>（方法拦截器），<code>MethodInterceptor</code>接口源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * General-purpose {@link Enhancer} callback which provides for "around advice". * @author Juozas Baliuka &lt;a href="mailto:baliuka@mwm.lt">baliuka@mwm.lt&lt;/a> * @version $Id: MethodInterceptor.java,v 1.8 2004/06/24 21:15:20 herbyderby Exp $ */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodInterceptor</span><span class="token keyword">extends</span> <span class="token class-name">Callback</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * All generated proxied methods call this method instead of the original method.     * The original method may either be invoked by normal reflection using the Method object,     * or by using the MethodProxy (faster).     * @param obj "this", the enhanced object     * @param method intercepted Method     * @param args argument array; primitive types are wrapped     * @param proxy used to invoke super (non-intercepted method); may be called     * as many times as needed     * @throws Throwable any exception may be thrown; if so, super method will not be invoked     * @return any value compatible with the signature of the proxied method. Method returning void will ignore this value.     * @see MethodProxy     */</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span>                               MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口中只有一个<code>intercept</code>方法，其中传入的参数：</p><ol><li><code>obj</code> 表示增强的对象，即实现这个接口类的一个对象；</li><li><code>method</code> 表示要被拦截的方法；</li><li><code>args</code> 表示方法参数；</li><li><code>proxy</code> 表示要触发父类的方法对象；</li></ol><p>在创建代理对象的逻辑<code>getInstance(Class&lt;?&gt; clazz)</code>中，调用了<code>enhancer.create()</code>方法，我们跟进源码看一下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Generate a new class if necessary and uses the specified * callbacks (if any) to create a new object instance. * Uses the no-arg constructor of the superclass. * @return a new instance */</span><span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    classOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    argumentTypes <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">createHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码注释内容翻译：如有必要，生成一个新类，并使用指定的回调（如果有）来创建一个新的对象实例。 使用的父类的参数的构造方法来实例化父类。</p><p>它的核心内容是在<code>createHelper();</code>方法中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">createHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">preValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object key <span class="token operator">=</span> KEY_FACTORY<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span>superclass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> superclass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">,</span>            ReflectUtils<span class="token punctuation">.</span><span class="token function">getNames</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">,</span>            filter <span class="token operator">==</span> ALL_ZERO <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WeakCacheKey</span><span class="token operator">&lt;</span>CallbackFilter<span class="token operator">></span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">,</span>            callbackTypes<span class="token punctuation">,</span>            useFactory<span class="token punctuation">,</span>            interceptDuringConstruction<span class="token punctuation">,</span>            serialVersionUID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentKey <span class="token operator">=</span> key<span class="token punctuation">;</span>    Object result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>preValidate()</code>方法的作用是，前置校验，校验<code>callbackTypes、filter</code>是否为空，以及为空时的处理。</p><p>然后通过<code>KEY_FACTORY.newInstance()</code>方法创建<code>EnhancerKey</code>对象，并将其作为<code>super.create(key)</code>方法的参数传入，我们来看一下这个<code>create()</code>方法，发现它是<code>Enhancer</code>类的父类<code>AbstractClassGenerator</code>中的一个方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ClassLoader loader <span class="token operator">=</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> ClassLoaderData<span class="token operator">></span> cache <span class="token operator">=</span> CACHE<span class="token punctuation">;</span>        ClassLoaderData data <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>AbstractClassGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cache <span class="token operator">=</span> CACHE<span class="token punctuation">;</span>                data <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Map<span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> ClassLoaderData<span class="token operator">></span> newCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token operator">&lt;</span>ClassLoader<span class="token punctuation">,</span> ClassLoaderData<span class="token operator">></span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>                    data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoaderData</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>                    newCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    CACHE <span class="token operator">=</span> newCache<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">firstInstance</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">nextInstance</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CodeGenerationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个方法在最后调用了 <code>nextInstance(obj)</code> 方法，它对应的实现，是在<code>Enhancer</code>类中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">nextInstance</span><span class="token punctuation">(</span>Object instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    EnhancerFactoryData data <span class="token operator">=</span> <span class="token punctuation">(</span>EnhancerFactoryData<span class="token punctuation">)</span> instance<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>classOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>generatedClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Class<span class="token punctuation">[</span><span class="token punctuation">]</span> argumentTypes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>argumentTypes<span class="token punctuation">;</span>    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argumentTypes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        argumentTypes <span class="token operator">=</span> Constants<span class="token punctuation">.</span>EMPTY_CLASS_ARRAY<span class="token punctuation">;</span>        arguments <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>argumentTypes<span class="token punctuation">,</span> arguments<span class="token punctuation">,</span> callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里又调用了<code>data.newInstance(argumentTypes, arguments, callbacks)</code>方法，第一个参数为代理对象的构造器类型，第二个为代理对象构造方法参数，第三个为对应回调对象。源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">newInstance</span><span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span> argumentTypes<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">,</span> Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> callbacks<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setThreadCallbacks</span><span class="token punctuation">(</span>callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Explicit reference equality is added here just in case Arrays.equals does not have one</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>primaryConstructorArgTypes <span class="token operator">==</span> argumentTypes <span class="token operator">||</span>                Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>primaryConstructorArgTypes<span class="token punctuation">,</span> argumentTypes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If we have relevant Constructor instance at hand, just call it</span>            <span class="token comment" spellcheck="true">// This skips "get constructors" machinery</span>            <span class="token keyword">return</span> ReflectUtils<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>primaryConstructor<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Take a slow path if observing unexpected argument types</span>        <span class="token keyword">return</span> ReflectUtils<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>generatedClass<span class="token punctuation">,</span> argumentTypes<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// clear thread callbacks to allow them to be gc'd</span>        <span class="token function">setThreadCallbacks</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们发现这里面的逻辑的意思就是，根据传进来的参数，通过反射来生成对象，我们可以利用<code>cglib</code>的代理类可以将内存中的 <code>class</code> 文件写入本地磁盘：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//利用 cglib 的代理类可以将内存中的 class 文件写入本地磁盘</span>    System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>DebuggingClassWriter<span class="token punctuation">.</span>DEBUG_LOCATION_PROPERTY<span class="token punctuation">,</span> <span class="token string">"/Users/eamon.zhang/Documents/cglib"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealSubjectCglibDynamicProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubjectCglibDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealSubject instance <span class="token operator">=</span> <span class="token punctuation">(</span>RealSubject<span class="token punctuation">)</span> proxy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RealSubject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>执行之后，在对应的目录中可以看到生成了下图中这三个<code>.class</code>文件：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/14/16dc93b3c83d843b?w=898&amp;h=168&amp;f=png&amp;s=157985" alt=""></p><p>通过调试跟踪，我们发现 <code>RealSubject$$EnhancerByCGLIB$$5389cdca</code> 就是 <code>CGLib</code>生成的代理类，继承了 <code>RealSubject</code> 类。通过<code>IDEA</code>查看该源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span>$$EnhancerByCGLIB$$5389cdca <span class="token keyword">extends</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> CGLIB$<span class="token function">STATICHOOK1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CGLIB$THREAD_CALLBACKS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CGLIB$emptyArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Class <span class="token class-name">var0</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.eamon.javadesignpatterns.proxy.dynamic.cglib.RealSubject$$EnhancerByCGLIB$$5389cdca"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">var1</span><span class="token punctuation">;</span>        CGLIB$request$<span class="token number">0</span>$Method <span class="token operator">=</span> ReflectUtils<span class="token punctuation">.</span><span class="token function">findMethods</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>var1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.eamon.javadesignpatterns.proxy.dynamic.cglib.RealSubject"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        CGLIB$request$<span class="token number">0</span>$Proxy <span class="token operator">=</span> MethodProxy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var0<span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token string">"CGLIB$request$0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> var10000 <span class="token operator">=</span> ReflectUtils<span class="token punctuation">.</span><span class="token function">findMethods</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/Object;)Z"</span><span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token string">"()Ljava/lang/String;"</span><span class="token punctuation">,</span> <span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">,</span> <span class="token string">"clone"</span><span class="token punctuation">,</span> <span class="token string">"()Ljava/lang/Object;"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>var1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CGLIB$equals$<span class="token number">1</span>$Method <span class="token operator">=</span> var10000<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        CGLIB$equals$<span class="token number">1</span>$Proxy <span class="token operator">=</span> MethodProxy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var0<span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/Object;)Z"</span><span class="token punctuation">,</span> <span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token string">"CGLIB$equals$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CGLIB$toString$<span class="token number">2</span>$Method <span class="token operator">=</span> var10000<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        CGLIB$toString$<span class="token number">2</span>$Proxy <span class="token operator">=</span> MethodProxy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var0<span class="token punctuation">,</span> <span class="token string">"()Ljava/lang/String;"</span><span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token string">"CGLIB$toString$2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CGLIB$hashCode$<span class="token number">3</span>$Method <span class="token operator">=</span> var10000<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        CGLIB$hashCode$<span class="token number">3</span>$Proxy <span class="token operator">=</span> MethodProxy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var0<span class="token punctuation">,</span> <span class="token string">"()I"</span><span class="token punctuation">,</span> <span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token string">"CGLIB$hashCode$3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CGLIB$clone$<span class="token number">4</span>$Method <span class="token operator">=</span> var10000<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        CGLIB$clone$<span class="token number">4</span>$Proxy <span class="token operator">=</span> MethodProxy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var0<span class="token punctuation">,</span> <span class="token string">"()Ljava/lang/Object;"</span><span class="token punctuation">,</span> <span class="token string">"clone"</span><span class="token punctuation">,</span> <span class="token string">"CGLIB$clone$4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> CGLIB$request$<span class="token function">0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodInterceptor var10000 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var10000 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            CGLIB$<span class="token function">BIND_CALLBACKS</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var10000 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>CGLIB$CALLBACK_0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var10000 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var10000<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CGLIB$request$<span class="token number">0</span>$Method<span class="token punctuation">,</span> CGLIB$emptyArgs<span class="token punctuation">,</span> CGLIB$request$<span class="token number">0</span>$Proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>我们通过代理类的源码可以看到，代理类会获得所有在父类继承来的方法，并且会有 <code>MethodProxy</code> 与之对应，比如 <code>Method CGLIB$request$0$Method</code>、<code>MethodProxy CGLIB$request$0$Proxy</code>这些方法在代理类的 <code>reuqest()</code>中都有调用。</p><p><strong>调用过程:</strong> 代理对象调用 <code>this.request()</code>方法 -&gt; 调用拦截器 -&gt; <code>methodProxy.invokeSuper</code> -&gt; <code>CGLIB$request$0()</code> -&gt; 被代理对象 <code>request()</code>方法。 此时，我们发现拦截器 <code>MethodInterceptor</code> 中就是由 <code>MethodProxy</code> 的 <code>invokeSuper</code> 方法调用代理方法的。</p><p>MethodProxy 非常关键，我们分析一下它具体做了什么：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodProxy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Signature sig1<span class="token punctuation">;</span>    <span class="token keyword">private</span> Signature sig2<span class="token punctuation">;</span>    <span class="token keyword">private</span> CreateInfo createInfo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object initLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> FastClassInfo fastClassInfo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * For internal use by {@link Enhancer} only; see the {@link net.sf.cglib.reflect.FastMethod} class     * for similar functionality.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MethodProxy <span class="token function">create</span><span class="token punctuation">(</span>Class <span class="token class-name">c1</span><span class="token punctuation">,</span> Class <span class="token class-name">c2</span><span class="token punctuation">,</span> String desc<span class="token punctuation">,</span> String name1<span class="token punctuation">,</span> String name2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MethodProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span>sig1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signature</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span>sig2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signature</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span>createInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateInfo</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CreateInfo</span>    <span class="token punctuation">{</span>        Class <span class="token class-name">c1</span><span class="token punctuation">;</span>        Class <span class="token class-name">c2</span><span class="token punctuation">;</span>        NamingPolicy namingPolicy<span class="token punctuation">;</span>        GeneratorStrategy strategy<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> attemptLoad<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CreateInfo</span><span class="token punctuation">(</span>Class <span class="token class-name">c1</span><span class="token punctuation">,</span> Class <span class="token class-name">c2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>c1 <span class="token operator">=</span> c1<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>c2 <span class="token operator">=</span> c2<span class="token punctuation">;</span>            AbstractClassGenerator fromEnhancer <span class="token operator">=</span> AbstractClassGenerator<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fromEnhancer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                namingPolicy <span class="token operator">=</span> fromEnhancer<span class="token punctuation">.</span><span class="token function">getNamingPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                strategy <span class="token operator">=</span> fromEnhancer<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                attemptLoad <span class="token operator">=</span> fromEnhancer<span class="token punctuation">.</span><span class="token function">getAttemptLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>继续看<code>invokeSuper()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invokeSuper</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FastClassInfo fci <span class="token operator">=</span> fastClassInfo<span class="token punctuation">;</span>        <span class="token keyword">return</span> fci<span class="token punctuation">.</span>f2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>fci<span class="token punctuation">.</span>i2<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FastClassInfo</span><span class="token punctuation">{</span>    FastClass f1<span class="token punctuation">;</span>    FastClass f2<span class="token punctuation">;</span>    <span class="token keyword">int</span> i1<span class="token punctuation">;</span>    <span class="token keyword">int</span> i2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码调用过程就是获取到代理类对应的 <code>FastClass</code>，并执行了代理方法。还记得之前生成三个 <code>class</code> 文件吗？<code>RealSubject$$EnhancerByCGLIB$$5389cdca$$FastClassByCGLIB$$57b94d72.class</code>就是代理类的 <code>FastClass</code> ，<code>RealSubject$$FastClassByCGLIB$$ed23432.class</code>就是被代理类的<code>FastClass</code>。</p><p><code>CGLib</code> 动态代理执行代理方法效率之所以比 <code>JDK</code> 的高是因为 <code>Cglib</code> 采用了 <code>FastClass</code> 机 制，它的原理简单来说就是:</p><ul><li>为代理类和被代理类各生成一个 Class，这个 Class 会为代理类或被代理类的方法分配一个 <code>index(int 类型)</code>。这个 <code>index</code> 当做一个入参，<code>FastClass</code>就可以直接定位要调用的方法直接进行调用，这样省去了反射调用，所以调用效率比 <code>JDK</code>动态代理通过反射调用高。</li></ul><p>至此，Cglib 动态代理的原理我们就基本搞清楚了，如果对代码细节有兴趣的小伙伴可以再自行深入研究。</p><h1 id="JDK-Proxy-与-CGlib-比较"><a href="#JDK-Proxy-与-CGlib-比较" class="headerlink" title="JDK Proxy 与 CGlib 比较"></a>JDK Proxy 与 CGlib 比较</h1><ol><li><code>JDK</code> 动态代理是<strong>实现</strong>了被代理对象的接口，<code>CGLib</code> 是<strong>继承</strong>了被代理对象。</li><li><code>JDK</code> 和 <code>CGLib</code> 都是在运行期生成字节码，<code>JDK</code> 是直接写 <code>Class</code> 字节码，<code>CGLib</code> 使用 <code>ASM</code> 框架写 <code>Class</code> 字节码，<code>Cglib</code> 代理实现更复杂，<strong>生成代理类</strong> 比 <code>JDK</code> 效率低。</li><li><code>JDK</code> 调用代理方法，是通过反射机制调用，<code>CGLib</code> 是通过 <code>FastClass</code> 机制直接调用方法， <code>CGLib</code> <strong>执行效率</strong> 更高</li></ol><h1 id="代理模式与-Spring"><a href="#代理模式与-Spring" class="headerlink" title="代理模式与 Spring"></a>代理模式与 Spring</h1><h2 id="Spring-中的代理选择原则"><a href="#Spring-中的代理选择原则" class="headerlink" title="Spring 中的代理选择原则"></a>Spring 中的代理选择原则</h2><ol><li>当 <code>Bean</code> 有实现接口时，<code>Spring</code> 就会用 <code>JDK</code> 的动态代理</li><li>当 <code>Bean</code> 没有实现接口时，<code>Spring</code> 选择 <code>CGLib</code>。</li><li><code>Spring</code> 可以通过配置强制使用 <code>CGLib</code>，只需在 <code>Spring</code> 的配置文件中加入如下代码:</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>参考资料：<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html</a></p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><h2 id="静态代理和动态的本质区别"><a href="#静态代理和动态的本质区别" class="headerlink" title="静态代理和动态的本质区别"></a>静态代理和动态的本质区别</h2><ol><li>静态代理只能通过<strong>手动</strong>完成代理操作，如果被代理类<strong>增加新的方法</strong>，代理类需要<strong>同步新增</strong>，<strong>违背开闭原则</strong>。</li><li>动态代理采用在<strong>运行时动态生成</strong>代码的方式，取消了对被代理类的扩展限制，<strong>遵循开闭原则</strong>。</li><li>若动态代理要对目标类的增强逻辑扩展，结合策略模式，只需要新增策略类便可完成，无需修改代理类的代码。</li></ol><h2 id="代理模式的优缺点"><a href="#代理模式的优缺点" class="headerlink" title="代理模式的优缺点"></a>代理模式的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>代理模式能将代理对象与真实被调用的目标对象分离。</li><li>一定程度上降低了系统的耦合度，扩展性好。</li><li>可以起到保护目标对象的作用。</li><li>可以对目标对象的功能增强</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>代理模式会造成系统设计中类的数量增加。</li><li>在客户端和目标对象增加一个代理对象，会造成请求处理速度变慢。</li><li>增加了系统的复杂度。</li></ol><hr><p>本篇文章的源码目录：<a href="https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/main/java/com/eamon/javadesignpatterns/proxy" target="_blank" rel="noopener">https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/main/java/com/eamon/javadesignpatterns/proxy</a></p><p>测试类源码目录：<a href="https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/test/java/com/eamon/javadesignpatterns/proxy" target="_blank" rel="noopener">https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/test/java/com/eamon/javadesignpatterns/proxy</a></p><hr><blockquote><p>欢迎大家 star 源码，共同进步，我会按照 git 上的大纲在学习的同时，记录文章与源码~</p></blockquote><blockquote><p>博主刚开始写博客不久，文中若有错误或者有任何的建议，请在留言中指出，向大家学习~</p></blockquote><blockquote><p>本文由博客一文多发平台 <a href="https://openwrite.cn?from=article_bottom" target="_blank" rel="noopener">OpenWrite</a> 发布！ </p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式之多线程调试与破坏单例</title>
      <link href="/posts/7738cf8e.html"/>
      <url>/posts/7738cf8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在之前的 <a href="https://segmentfault.com/a/1190000020608216" target="_blank" rel="noopener">设计模式 - 单例模式（详解）看看和你理解的是否一样？</a> 一文中，我们提到了通过<code>Idea</code> 开发工具进行多线程调试、单例模式的暴力破坏的问题；由于篇幅原因，现在单独开一篇文章进行演示：线程不安全的单例在多线程情况下为何被创建多个、如何破坏单例。</p><a id="more"></a><blockquote><p>如果还不知道如何使用IDEA工具进行线程模式的调试，请先阅读我之前发的一篇文章： <a href="https://segmentfault.com/a/1190000020620788" target="_blank" rel="noopener">你不知道的 IDEA Debug调试小技巧</a></p></blockquote><h1 id="一、线程不安全的单例在多线程情况下为何被创建多个"><a href="#一、线程不安全的单例在多线程情况下为何被创建多个" class="headerlink" title="一、线程不安全的单例在多线程情况下为何被创建多个"></a>一、线程不安全的单例在多线程情况下为何被创建多个</h1><p>首先回顾简单线程不安全的懒汉式单例的代码以及测试程序代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午10:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySimpleSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazySimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySimpleSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySimpleSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试程序</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            LazySimpleSingleton instance <span class="token operator">=</span> LazySimpleSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对于这个单例，我们毫无疑问认为它是线程不安全的，至于为什么，接下来使用<code>IDEA</code>工具的线程<code>debug</code>模式来直观的找出答案。</p><h2 id="在关键代码上打断点"><a href="#在关键代码上打断点" class="headerlink" title="在关键代码上打断点"></a>在关键代码上打断点</h2><ol><li>单例类<code>LazySimpleSingleton</code>的<code>if (instance == null)</code> 处：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9f40e670710b?w=1328&amp;h=648&amp;f=png&amp;s=390321" alt=""></p><ol start="2"><li>测试类，多线程入口调用<code>getInstance()</code>处：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9f630cc7c7b0?w=1220&amp;h=624&amp;f=png&amp;s=299389" alt=""></p><h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><ol><li>启动 <code>debug</code> ，我们可以在调试窗口找到我们启动的线程：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9f7e613a2c82?w=1496&amp;h=524&amp;f=png&amp;s=543676" alt=""></p><ol start="2"><li>将 <code>pool-1-thread-1</code> 线程单步执行到<code>if (instance == null)</code> 断点处，观察<code>instance</code>值为<code>null</code>；</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9fa582bc095e?w=2044&amp;h=532&amp;f=png&amp;s=563366" alt=""></p><ol start="3"><li>将<code>pool-1-thread-1</code>执行到<code>instance = new LazySimpleSingleton();</code>处等待初始化：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa04c27dca1f7?w=1922&amp;h=1128&amp;f=png&amp;s=933092" alt=""></p><ol start="4"><li>切换线程 <code>pool-1-thread-2</code> 同样单步执行到 <code>if (instance == null)</code> 断点处，此时观察<code>instance</code>值也为<code>null</code>（这就是我们常说的两个线程同时执行到断代码处）：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9fbf2a48ad99?w=1994&amp;h=532&amp;f=png&amp;s=571312" alt=""></p><ol start="5"><li>同样将<code>pool-1-thread-2</code>执行到<code>instance = new LazySimpleSingleton();</code>处等待初始化：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa045d6913e72?w=1888&amp;h=1124&amp;f=png&amp;s=950702" alt=""></p><ol start="6"><li>显然，这两个线程都满足<code>if (instance == null)</code> 的条件，都应该到对应的代码块中执行实例化操作，那么这两个线程就会分别初始化：</li></ol><p>线程 <code>pool-1-thread-1</code> 实例化后：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa059cc8168f8?w=1914&amp;h=1124&amp;f=png&amp;s=980424" alt=""></p><p>切换线程 <code>pool-1-thread-2</code> 观察 <code>instance</code> 值已经被初始化了，但是，线程<code>pool-1-thread-2</code> 还是会被实例化一遍：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa07a4143e017?w=2030&amp;h=1082&amp;f=png&amp;s=994150" alt=""></p><p>线程<code>pool-1-thread-2</code>实例化后：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa0827ddfea87?w=2018&amp;h=1046&amp;f=png&amp;s=917141" alt=""></p><p>大家是否一目了然了呢？</p><ol start="7"><li>将两个线程执行完，看控制台：</li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa0954bb5c2ea?w=2384&amp;h=604&amp;f=png&amp;s=565895" alt=""></p><p>大家可以看到，虽然输出打印的对象是同一个，但是，确实是创建了两遍，只不过 <code>pool-1-thread-2</code> 实例化后将 <code>pool-1-thread-1</code>实例化的对象值给覆盖了。</p><p>当我将线程<code>pool-1-thread-1</code>和线程<code>pool-1-thread-2</code>同时执行到<code>instance = new LazySimpleSingleton();</code>处然后先让<code>pool-1-thread-1</code>执行完打印后，再将<code>pool-1-thread-2</code>执行实例化操作，就会看到打印的对象会是不一样的了：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa0d28df6135c?w=2354&amp;h=602&amp;f=png&amp;s=603274" alt=""></p><p>这就是通过线程调试模式手动控制线程执行顺序来模拟还原多线程环境下，线程不安全的情况。</p><hr><h1 id="二、改进线程不安全的单例"><a href="#二、改进线程不安全的单例" class="headerlink" title="二、改进线程不安全的单例"></a>二、改进线程不安全的单例</h1><p>我们明白了线程不安全的原因是两个线程同时拿到的<code>instance</code>资源都为<code>null</code>，从而都进行实例化。那么有没有什么方法能解决呢？当然有，给 <code>getInstance()</code>加 上 <code>synchronized</code> 关键字，使这个方法变成线程同步方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySimpleSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazySimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySimpleSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> LazySimpleSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当我们将其中一个线程执行并调用 <code>getInstance()</code>方法时，另一个线程在调用 <code>getInstance()</code>方法，线程的状态由 <code>RUNNING</code> 变成了<code>MONITOR</code>,出现阻塞。直到第一个线程执行完，第二个线程才恢复 <code>RUNNING</code> 状态继续调用 <code>getInstance()</code> 方法</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa1ac2fefc7c6?w=1806&amp;h=482&amp;f=png&amp;s=251644" alt=""></p><p>这就解决了之前所说的线程安全问题，但是这样子在线程数量比较多情况下，如果 <code>CPU</code>分配压力上升，会导致大批量线程出现阻塞，从而导致程序运行性能大幅下降；为了解决线程安全和程序性能问题，于是乎有了我们的双重检查式的单例。这里就不再多说了。</p><hr><h1 id="三、破坏单例"><a href="#三、破坏单例" class="headerlink" title="三、破坏单例"></a>三、破坏单例</h1><p>一般情况下，我们创建使用饿汉式单例或双重检查的懒汉式单例是没有问题的，但是在一定情况下，会发生单例被破坏。</p><h2 id="反射破坏单例"><a href="#反射破坏单例" class="headerlink" title="反射破坏单例"></a>反射破坏单例</h2><p>实际情况下，公司一个程序员写了一个单例，但是另外一个程序员，可能比较牛 X，写代码风格有点不一样，他通过反射来调用别人写的接口，这就会出现此单例并非彼单例的情况。这就破坏了单例。</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>在我们写单例的时候，大家有没有注意到私有的构造方法前面的修饰符仅为 <code>private</code>，如果我们使用反射来调用其构造方法，然后，再调用 <code>getInstance()</code>方法，应该就会有两个不同的实例。</p><p>我们以前面说单例的文章中的 <code>LazyInnerClassSingleton</code>为例，编写反射调用测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReflex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 很无聊的情况下，进行破坏</span>        Class<span class="token operator">&lt;</span>LazyInnerClassSingleton<span class="token operator">></span> clazz <span class="token operator">=</span> LazyInnerClassSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射拿到私有的构造方法</span>        Constructor<span class="token operator">&lt;</span>LazyInnerClassSingleton<span class="token operator">></span> c <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置访问属性，强制访问</span>        c<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 暴力初始化两次，这就相当于调用了两次构造方法</span>        LazyInnerClassSingleton o1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyInnerClassSingleton o2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只要 o1和o2 地址不相等，就可以说明这是两个不同的对象，也就是违背了单例模式的初衷</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1 <span class="token operator">==</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果如下：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa2c8f6482ad2?w=1030&amp;h=260&amp;f=png&amp;s=139377" alt=""></p><p>显然，是创建了两个不同的实例。现在，我们在其构造方法中做一些限制，一旦出现多次重复创建，则直接抛出异常。来看优化后的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInnerClassSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>LazyHolder<span class="token punctuation">.</span>INSTANCE <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不允许创建多个实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注意关键字final，保证方法不被重写和重载</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LazyInnerClassSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LazyHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LazyHolder</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意 final 关键字（保证不被修改）</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LazyInnerClassSingleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次调用：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa2e42e757f6b?w=2192&amp;h=576&amp;f=png&amp;s=791866" alt=""></p><p>至此，就避免了单例被反射破坏的问题。</p><h2 id="序列化破坏单例"><a href="#序列化破坏单例" class="headerlink" title="序列化破坏单例"></a>序列化破坏单例</h2><p>另外一种情况，可能会遇到，我们需要将对象序列化到磁盘，下次使用时再从磁盘反序列化回来，反序列化的对象会被重新分配内存，那如果序列化的对象为单例，则就违背了单例模式的初衷。这也相当于破坏了单例。</p><h3 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h3><p>我们还是以<code>LazyInnerClassSingleton</code>为例，将<code>LazyInnerClassSingleton</code> 实现 <code>Serializable</code> 接口；</p><p>然后编写测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-10-08 下午3:06 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LazyInnerClassSingleton s1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        LazyInnerClassSingleton s2 <span class="token operator">=</span> LazyInnerClassSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"LazyInnerClassSingleton.obj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"LazyInnerClassSingleton.obj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            s1 <span class="token operator">=</span> <span class="token punctuation">(</span>LazyInnerClassSingleton<span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行测试代码：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa376fad2fefd?w=1654&amp;h=550&amp;f=png&amp;s=424193" alt=""></p><p>可以看到，结果为两个不同的对象。这同样违背了单例模式的初衷。那么我们如何保证序列化的情况也能实现单例呢？其实也很简单，使用 <code>readResolve()</code> 方法即可：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInnerClassSingleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LazyHolder<span class="token punctuation">.</span>INSTANCE <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不允许创建多个实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注意关键字final，保证方法不被重写和重载</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LazyInnerClassSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LazyHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LazyHolder</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意 final 关键字（保证不被修改）</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LazyInnerClassSingleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解决反序列化对象不一致问题</span>    <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LazyHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>大家肯定会问，why？</p><p>为了一探究竟，我们来看一下 JDK 源码，我们进入 <code>ObjectInputStream</code> 类的 <code>readObject()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> Object <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableOverride<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readObjectOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> outerHandle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>passHandle<span class="token punctuation">;</span>            Object var4<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Object obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">markDependency</span><span class="token punctuation">(</span>outerHandle<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>passHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>                ClassNotFoundException ex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>passHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>depth <span class="token operator">==</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>vlist<span class="token punctuation">.</span><span class="token function">doCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                var4 <span class="token operator">=</span> obj<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>passHandle <span class="token operator">=</span> outerHandle<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>closed <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>depth <span class="token operator">==</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> var4<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们发现：readObject 中又调用了我们重写的 <code>readObject0()</code>方法，进入 <code>readObject0()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>tc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> <span class="token number">115</span><span class="token operator">:</span>                var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> var4<span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>depth<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>bin<span class="token punctuation">.</span><span class="token function">setBlockDataMode</span><span class="token punctuation">(</span>oldMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> var4<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们看到代码中调用了 <code>ObjectInputStream</code> 的 <code>readOrdinaryObject()</code> 方法，我们继续进入看源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> cl <span class="token operator">!=</span> Class<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> cl <span class="token operator">!=</span> ObjectStreamClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object obj<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    obj <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> desc<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token punctuation">(</span>IOException<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InvalidClassException</span><span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"unable to create instance"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>发现调用了 <code>ObjectStreamClass</code> 的 <code>isInstantiable()</code>方法，而 <code>isInstantiable()</code>里面的代码如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requireInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cons <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码非常简单，就是判断一下构造方法是否为空，构造方法不为空就返回 <code>true</code>，也就是说，只要有无参构造方法就会实例化；这时候，其实还没有找到为什么加上<code>readResolve()</code>方法就避免了单例被破坏的真正原因，我们再次回到<code>ObjectInputStream</code> 的 <code>readOrdinaryObject()</code>方法继续往下看可以找到如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Object <span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>passHandle<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> desc<span class="token punctuation">.</span><span class="token function">hasReadResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object rep <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">invokeReadResolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>unshared <span class="token operator">&amp;&amp;</span> rep<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rep <span class="token operator">=</span> <span class="token function">cloneArray</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rep <span class="token operator">!=</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rep <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rep<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filterCheck</span><span class="token punctuation">(</span>rep<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>rep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filterCheck</span><span class="token punctuation">(</span>rep<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            obj <span class="token operator">=</span> rep<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>passHandle<span class="token punctuation">,</span> rep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>判断无参构造方法是否存在之后，又调用了 <code>hasReadResolveMethod()</code>方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">hasReadResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requireInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readResolveMethod <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>逻辑非常简单，就是判断<code>readResolveMethod</code> 是否为空，不为空就返回 <code>true</code>。那么 <code>readResolveMethod</code>是在哪里赋值的呢? 通过全局查找找到了赋值代码在私有方法 <code>ObjectStreamClass()</code>方法中给 <code>readResolveMethod</code> 进行赋值，来看代码:</p><pre class=" language-java"><code class="language-java"> ObjectStreamClass<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>readResolveMethod <span class="token operator">=</span> ObjectStreamClass<span class="token punctuation">.</span><span class="token function">getInheritableMethod</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> <span class="token string">"readResolve"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Class<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码的逻辑其实就是通过反射找到一个无参的 <code>readResolve()</code>方法，并且保存下来，现在再回到 <code>ObjectInputStream</code> 的 <code>readOrdinaryObject()</code> 方法继续往下看，如果<code>readResolve()</code>存在则调用 <code>invokeReadResolve()</code>方法：</p><pre class=" language-java"><code class="language-java">Object <span class="token function">invokeReadResolve</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> UnsupportedOperationException <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">requireInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readResolveMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readResolveMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Throwable th <span class="token operator">=</span> var4<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>th <span class="token keyword">instanceof</span> <span class="token class-name">ObjectStreamException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>ObjectStreamException<span class="token punctuation">)</span>th<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">throwMiscException</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>th<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>var5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们可以看到在 <code>invokeReadResolve()</code>方法中用反射调用了 <code>readResolveMethod()</code> 方法。 通过<code>JDK</code>源码分析我们可以看出，虽然，增加 <code>readResolve()</code>方法返回实例，解决了单例被破坏的问题。但是，我们通过分析源码以及调试，我们可以看到实际上实例化了两 次，只不过新创建的对象没有被返回而已.</p><p>那如果，创建对象的动作发生频率增大，就 意味着内存分配开销也就随之增大；为了解决这个问题，我们推荐使用注册式单例。</p><h1 id="为何建议使用注册式（枚举式）单例"><a href="#为何建议使用注册式（枚举式）单例" class="headerlink" title="为何建议使用注册式（枚举式）单例"></a>为何建议使用注册式（枚举式）单例</h1><p>我们在前文中说到了，我们极力推荐使用枚举类型的单例；接下来我们分析一下原因：</p><p>使用 <code>Java</code> 反编译工具 <code>Jad</code>(自行下载)，解压后，使用命令行调用：</p><pre><code>./jad ~/IdeaProjects/own/java-advanced/01.DesignPatterns/design-patterns/build/classes/java/main/com/eamon/javadesignpatterns/singleton/enums/EnumSingleton.class</code></pre><p>会在当前目录生成一个 <code>EnumSingleton.jad</code>文件，我们使用 <code>vscode</code> 打开这个文件查看：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingleton</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingleton<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>EnumSingleton<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$VALUES<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingleton <span class="token function">valueOf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>EnumSingleton<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>com<span class="token operator">/</span>eamon<span class="token operator">/</span>javadesignpatterns<span class="token operator">/</span>singleton<span class="token operator">/</span>enums<span class="token operator">/</span>EnumSingleton<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">EnumSingleton</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EnumSingleton INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EnumSingleton $VALUES<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span>    <span class="token punctuation">{</span>        INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token string">"INSTANCE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $VALUES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            INSTANCE        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>请注意这段代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span>    INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">(</span><span class="token string">"INSTANCE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    $VALUES <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnumSingleton</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        INSTANCE    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>原来枚举类单例在静态代码块中就给<code>INSTANCE</code> 赋了值，是饿汉式单例的实现方式。那么同样的，我们能否通过反射和序列化方式进行破坏呢？</p><p>先分析通过序列化方式：</p><p>我们还是回到<code>JDK</code>源码：在 <code>ObjectInputStream</code> 的 <code>readObject0()</code>方法中有如下代码：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> Object <span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">case</span> <span class="token number">126</span><span class="token operator">:</span>            var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkResolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readEnum</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> var4<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们看到 <code>readObject0()</code>中调用了<code>readEnum()</code>方法，跟进该方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Enum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">readEnum</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> unshared<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bin<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ObjectStreamClass desc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readClassDesc</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>desc<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidClassException</span><span class="token punctuation">(</span><span class="token string">"non-enum class: "</span> <span class="token operator">+</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> enumHandle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>unshared <span class="token operator">?</span> unsharedMarker <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            ClassNotFoundException resolveEx <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">getResolveException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveEx <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">markException</span><span class="token punctuation">(</span>enumHandle<span class="token punctuation">,</span> resolveEx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Enum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result <span class="token operator">=</span> null<span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Enum<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> en <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    result <span class="token operator">=</span> en<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token punctuation">(</span>IOException<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InvalidObjectException</span><span class="token punctuation">(</span><span class="token string">"enum constant "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" does not exist in "</span> <span class="token operator">+</span> cl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unshared<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>enumHandle<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>handles<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span>enumHandle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>passHandle <span class="token operator">=</span> enumHandle<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们发现枚举类型其实通过类名和 Class 对象类找到一个唯一的枚举对象。因此，枚举对象不可能被类加载器加载多次。</p><p>那么是否可以通过反射进行破坏呢？我们先来执行以下反射破坏枚举类的测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 很无聊的情况下，进行破坏</span>        Class<span class="token operator">&lt;</span>EnumSingleton<span class="token operator">></span> clazz <span class="token operator">=</span> EnumSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射拿到私有的构造方法</span>        Constructor<span class="token operator">&lt;</span>EnumSingleton<span class="token operator">></span> c <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置访问属性，强制访问</span>        c<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 暴力初始化两次，这就相当于调用了两次构造方法</span>        EnumSingleton o1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EnumSingleton o2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只要 o1和o2 地址不相等，就可以说明这是两个不同的对象，也就是违背了单例模式的初衷</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1 <span class="token operator">==</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa675640607d3?w=1842&amp;h=498&amp;f=png&amp;s=586994" alt=""></p><p>报的是 <code>java.lang.NoSuchMethodException</code> 异常，意思是没找到无参的构造方法。</p><p>那么我们来看一下 <code>java.lang.Enum</code> 的源码，我们发现它只有一个<code>protected</code>的构造方法:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">Enum</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> ordinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ordinal <span class="token operator">=</span> ordinal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那我们来做一个这样的测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEnum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> EnumSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Constructor c <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EnumSingleton enumSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>EnumSingleton<span class="token punctuation">)</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Eamon"</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发现控制台输出如下错误：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16daa6c10ce968f8?w=1928&amp;h=384&amp;f=png&amp;s=531958" alt=""></p><p>意思就是不能用反射来创建枚举类型。至于为什么，我们还是来看 <code>JDK</code> 源码，进入<code>Constructor</code>的<code>newInstance()</code>方法中：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initargs<span class="token punctuation">)</span> <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> caller <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkAccess</span><span class="token punctuation">(</span>caller<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">16384</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot reflectively create enum objects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ConstructorAccessor ca <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructorAccessor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ca <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ca <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">acquireConstructorAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            T inst <span class="token operator">=</span> ca<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>initargs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> inst<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>原来，在源码中对枚举类型进行了强制性的判断（<code>16384</code>代表枚举类型）,如果是枚举类型，直接抛异常。到此为止也就说明了为什么《Effective Java》推荐使用枚举来实现单例的原因： <code>JDK</code> 枚举的语法特殊性，以及反射也为枚举保驾护航，让枚举式单例成为一种比较优雅的实现。</p><hr><p>本文中所涉及的源码可在 github 上找到，相关的测试代码在 test 包下：<a href="https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/test/java/com/eamon/javadesignpatterns/singleton" target="_blank" rel="noopener">https://github.com/eamonzzz/java-advanced</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debug调试小技巧</title>
      <link href="/posts/28d4a20f.html"/>
      <url>/posts/28d4a20f.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、多线程调试断点"><a href="#一、多线程调试断点" class="headerlink" title="一、多线程调试断点"></a>一、多线程调试断点</h1><p><code>Intellij IDEA</code> 的<code>debug</code>断点调试是有一个模式的选择的，就像下面这张图，平时我们都使用的是默认的 <code>ALL</code>（在<code>Eclipse</code>中默认是线程模式） ，这种模式我们只能将一个线程断下来，但其他线程却已经执行过了；而将其改为 <code>Thread</code> 后，就可以多个线程都断下来，并且可以很方便的切换线程的执行流程，这就是多线程调试。</p><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da915a2c81e219?w=846&amp;h=366&amp;f=png&amp;s=110075" alt=""></p><p>在<code>debug</code>控制台能够很方便的查看线程的执行状态，也可以很方便的选择某个线程去执行：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da918fbc2dc3b5?w=1722&amp;h=644&amp;f=png&amp;s=608110" alt=""></p><h1 id="二、回退断点"><a href="#二、回退断点" class="headerlink" title="二、回退断点"></a>二、回退断点</h1><p>不知道大伙有没有遇到这样一个问题，当我们进行<code>debug</code>时，通常不会进入某个方法一步一步的执行，而是选择性的跳过；当你想要回头观察某个变量的值得变化时，而你刚好没有跟进去，跳过了这个方法，这个时候，变量就被赋值了，我们通常的做法是重来一次。</p><p>其实IDEA的调试功能是非常强大的，我们来看看熟悉的调试窗口：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da928b40a6c55f?w=1626&amp;h=1368&amp;f=png&amp;s=972632" alt=""></p><p>使用红色框框出来的部分，表示当前程序执行到哪一块，哪一部分，你可以尝试用鼠标点点看，你会发现编辑器会跳转到对应的代码中，当然当前断点的位置通常会在列表的第一条。然后我们使用右键单击，你就可以看到如下图所示：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da92f0cfeb96b1?w=1258&amp;h=572&amp;f=png&amp;s=475388" alt=""></p><p>或者你也可以在下图中找到 <code>Drop Frame</code>：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9d91ebe9ffb8?w=1006&amp;h=158&amp;f=png&amp;s=105679" alt=""></p><p>在IDEA中，所谓的回退，叫 <code>Drop Frame</code>，选择<code>Drop Frame</code>后，程序会跳转回调用<strong>当前这个方法</strong>的地方，当然已经改变的值是不会恢复的。但是当该方法再次被调用时，你可以观察到某个变量什么时候被改变，至少我们不用再去重新运行一遍程序。</p><h1 id="三、条件断点"><a href="#三、条件断点" class="headerlink" title="三、条件断点"></a>三、条件断点</h1><p>条件断点就是当满足某个条件（通常是表达式）时，<code>debug</code>断点才会生效；这在循环中<code>debug</code>是非常有用的；例如我们想要在循环体中调试：当某个变量满足某个条件时，需要断点调试，来查看详细的执行流程及变化情况。</p><p>我们说过，<code>IDEA</code>中的<code>debug</code>功能是非常强大的，要使用条件断点也非常简单，下面这张图片中 <code>Condition</code>中的内容代表当<code>name</code>为<code>eamon:23</code>时，程序执行到断点处停下来。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9650b313c03d?w=1186&amp;h=678&amp;f=png&amp;s=322256" alt=""></p><p>有了条件断点，这样一来，那些不相关和我们不关心的代码就可以直接跳过了。</p><h1 id="四、临时断点"><a href="#四、临时断点" class="headerlink" title="四、临时断点"></a>四、临时断点</h1><p>所谓临时断点就是只断一次，<code>IDEA</code>默认断点会一致存在。如果你只需要暂停一次，那么使用临时断点会比较方便，因为暂停一次之后断点就自动消失了，不用手动取消。</p><p>临时断点可以通过在打断点时按住 <code>Alt</code> 或者 <code>option</code> 键，然后创建断点。也可以通过右键断点处，选择 <code>more</code> 然后在窗口中选中 <code>Remove once hit</code></p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9e05fa46798a?w=858&amp;h=372&amp;f=png&amp;s=151689" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9e0bdbb4d691?w=1854&amp;h=986&amp;f=png&amp;s=767671" alt=""></p><h1 id="五、求值计算"><a href="#五、求值计算" class="headerlink" title="五、求值计算"></a>五、求值计算</h1><p>求值计算功能在我们<code>debug</code>过程中，可以很方便的查看程序中所有变量的值，也可以临时修改程序中变量的值，这个功能能在一定程度上辅助我们进行代码调试。</p><p>这个功能可以在<code>debug</code>时在<code>debug</code>窗口打开：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9ccd7b5a5113?w=1832&amp;h=592&amp;f=png&amp;s=662123" alt=""></p><p>打开后是这样的：</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9cd7f91800bb?w=1144&amp;h=1116&amp;f=png&amp;s=121928" alt=""></p><p>然后你就可以在表达式输入框中，输入你想要的操作，比如，查看变量、修改变量（临时的）、调用某个方法等；这些操作结果将会在下方的<code>Result</code> 窗口中输出。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/8/16da9cf2962f9c97?w=1144&amp;h=796&amp;f=png&amp;s=138292" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Intellij IDEA </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij IDEA </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式（详解）看看和你理解的是否一样？</title>
      <link href="/posts/8ece96c4.html"/>
      <url>/posts/8ece96c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>单例模式是设计模式中相对简单且非常常见的一种设计模式，但是同时也是非常经典的<strong>高频</strong>面试题，相信还是有很多人在面试时会挂在这里。本篇文章主要针对单例模式做一个回顾，记录单例模式的应用场景、常见写法、针对线程安全进行调试（看得见的线程）以及总结。相信大家看完这篇文章之后，对单例模式有一个非常深刻的认识。</p><a id="more"></a><p>文章中按照常见的单例模式的写法，由浅入深进行讲解记录；以及指出该写法的不足，从而进行演进改造。</p><p>秉承废话少说的原则，我们下面快速开始</p><h1 id="二、定义"><a href="#二、定义" class="headerlink" title="二、定义"></a>二、定义</h1><p>单例模式(Singleton Pattern)是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。</p><p>单例模式是创建型模式。</p><h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><ol><li>生活中的单例：例如，国家主席、公司 CEO、部门经理等。</li><li>在<code>Java</code>世界中：<code>ServletContext</code>、 <code>ServletContextConfig</code> 等;</li><li>在 <code>Spring</code> 框架应用中：<code>ApplicationContext</code>、数据库的连接池也都是单例形式。</li></ol><h1 id="四、常见的单例模式写法"><a href="#四、常见的单例模式写法" class="headerlink" title="四、常见的单例模式写法"></a>四、常见的单例模式写法</h1><blockquote><p>单例模式主要有：饿汉式单例、懒汉式单例（线程不安全型、线程安全型、双重检查锁类型、静态内部类类型）、注册式（登记式）单例（枚举式单例、容器式单例）、<code>ThreadLocal</code>线程单例</p></blockquote><p>下面我们来看看各种模式的写法。</p><h2 id="1、饿汉式单例"><a href="#1、饿汉式单例" class="headerlink" title="1、饿汉式单例"></a>1、饿汉式单例</h2><p>饿汉式单例是在类加载的时候就立即初始化，并且创建单例对象。绝对线程安全，在线程还没出现以前就是实例化了，不可能存在访问安全问题。</p><p>Spring 中 IOC 容器 ApplicationContext 就是典型的饿汉式单例</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点</strong>：没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。</p><p><strong>缺点</strong>：类加载的时候就初始化，不管用与不用都占着空间，浪费了内存，有可能占着茅坑不拉屎。</p><h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午9:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.私有化构造器</span>    <span class="token keyword">private</span> <span class="token function">HungrySingleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.在类的内部创建自行实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HungrySingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.提供获取唯一实例的方法（全局访问点）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungrySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>还有另外一种写法，利用静态代码块的机制：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午10:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungryStaticSingleton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 私有化构造器</span>    <span class="token keyword">private</span> <span class="token function">HungryStaticSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 实例变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HungryStaticSingleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 在静态代码块中实例化</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungryStaticSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 提供获取实例方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HungryStaticSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码,我们创建 10 个线程（具体线程发令枪 ConcurrentExecutor 在文末源码中获取）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午11:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingletonTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                HungrySingleton instance <span class="token operator">=</span> HungrySingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre><code>pool-1-thread-6 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-1 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-9 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-10 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-2 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-7 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-5 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-3 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-4 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6pool-1-thread-8 : com.eamon.javadesignpatterns.singleton.hungry.HungrySingleton@5e37cce6...</code></pre><p>可以看到，饿汉式每次获取实例都是同一个。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>这两种写法都非常的简单，也非常好理解，饿汉式适用在单例对象较少的情况。</p><p>下面我们来看性能更优的写法——懒汉式单例。</p><hr><h2 id="2、懒汉式单例"><a href="#2、懒汉式单例" class="headerlink" title="2、懒汉式单例"></a>2、懒汉式单例</h2><p>懒汉式单例的特点是:被外部类调用的时候内部类才会加载。</p><p>懒汉式单例可以分为下面这几种写法来。</p><h3 id="简单懒汉式（线程不安全）"><a href="#简单懒汉式（线程不安全）" class="headerlink" title="简单懒汉式（线程不安全）"></a>简单懒汉式（线程不安全）</h3><p>这是懒汉式单例的简单写法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午10:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySimpleSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazySimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySimpleSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySimpleSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySimpleSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们创建一个多线程来测试一下，是否线程安全：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午11:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySimpleSingletonTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                LazySimpleSingleton instance <span class="token operator">=</span> LazySimpleSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>LazySimpleSingleton<span class="token annotation punctuation">@abe194f</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>LazySimpleSingleton<span class="token annotation punctuation">@abe194f</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>LazySimpleSingleton<span class="token annotation punctuation">@748e48d0</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>LazySimpleSingleton<span class="token annotation punctuation">@abe194f</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>LazySimpleSingleton<span class="token annotation punctuation">@abe194f</span></code></pre><p>从测试结果来看，一定几率出现创建两个不同结果的情况，意味着上面的单例存在线程安全隐患。</p><p>至于为什么？由于篇幅问题，我们在后面一篇文章中利用测试工具进行详细的分析（这可能也是面试中面试官会问到的问题）。大家现在只需要知道简单的懒汉式会存在这么一个问题就行了。</p><h3 id="简单懒汉式（线程安全）"><a href="#简单懒汉式（线程安全）" class="headerlink" title="简单懒汉式（线程安全）"></a>简单懒汉式（线程安全）</h3><p>通过对上面简单懒汉式单例的测试，我们知道存在线程安全隐患，那么，如何来避免或者解决呢？</p><p>我们都知道 java 中有一个<code>synchronized</code>可以来对共享资源进行加锁，保证在同一时刻只能有一个线程拿到该资源，其他线程只能等待。所以，我们对上面的简单懒汉式进行改造，给<code>getInstance()</code> 方法加上<code>synchronized</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 上午10:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySimpleSyncSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazySimpleSyncSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySimpleSyncSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> LazySimpleSyncSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySimpleSyncSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后使用发令枪进行测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            LazySimpleSyncSingleton instance <span class="token operator">=</span> LazySimpleSyncSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行多轮测试，并观察结果，发现能够获取同一个示例：</p><pre class=" language-java"><code class="language-java">pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>LazySimpleSyncSingleton<span class="token annotation punctuation">@1a7e99de</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>LazySimpleSyncSingleton<span class="token annotation punctuation">@1a7e99de</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>LazySimpleSyncSingleton<span class="token annotation punctuation">@1a7e99de</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>LazySimpleSyncSingleton<span class="token annotation punctuation">@1a7e99de</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>lazy<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>LazySimpleSyncSingleton<span class="token annotation punctuation">@1a7e99de</span></code></pre><p>线程安全问题是解决了，但是，用<code>synchronized</code>加锁，在线程数量比较多情况下，如果<code>CPU</code>分配压力上升，会导致大批量线程出现阻塞，从而导致程序运行性能大幅下降。</p><p>那么，有没有一种更好的方式，既兼顾线程安全又提升程序性能呢？答案是肯定的。</p><p>我们来看双重检查锁的单例模式。</p><h3 id="双重检查锁懒汉式"><a href="#双重检查锁懒汉式" class="headerlink" title="双重检查锁懒汉式"></a>双重检查锁懒汉式</h3><p>上面的线程安全方式的写法，<code>synchronized</code>锁是锁在 <code>getInstance()</code> 方法上，当多个线程过来拿资源的时候，其实需要拿的不是<code>getInstance()</code>这个方法，而是<code>getInstance()</code>方法里面的<code>instance</code> 实例对象，而如果这个实例对象一旦被初始化之后，多个线程到达时，就可以利用方法中的 <code>if (instance == null)</code> 去判断是否实例化，如果已经实例化了就直接返回，就没有必要再进行实例化一遍。所以对上面的代码进行改造：</p><p>第一次改造：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 下午2:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyDoubleCheckSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyDoubleCheckSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyDoubleCheckSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里判断是为了过滤不必要的同步加锁，因为如果已经实例化了，就可以直接返回了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果未初始化，则对资源进行上锁保护，待实例化完成之后进行释放</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyDoubleCheckSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种方法行不行？答案肯定是不行，代码中虽然是将同步锁添加到了实例化操作中，解决了每个线程由于同步锁的原因引起的阻塞，提高了性能；但是，这里会存在一个问题：</p><ul><li><code>线程X</code>和<code>线程Y</code>同时调用<code>getInstance()</code>方法，他们同时判断<code>instance == null</code>，得出的结果都是为<code>null</code>，所以进入了<code>if</code>代码块了</li><li>此时<code>线程X</code>得到<code>CPU</code>的控制权 -&gt; 进入同步代码块 -&gt; 创建对象 -&gt; 返回对象</li><li><code>线程X</code>执行完成了以后，释放了锁，然后<code>线程Y</code>得到了<code>CPU</code>的控制权。同样是 -&gt; 进入同步代码块 -&gt; 创建对象 -&gt; 返回对象</li></ul><p>所以我们明显可以分析出来：<code>LazyDoubleCheckSingleton</code> 类返回了不止一个实例！所以上面的代码是不行的！大家可以自行测试，我这里就不进行测试了！</p><p>我们再进行改造，经过分析，由于<code>线程X</code>已经实例化了对象，在<code>线程Y</code>再次进入的时候，我们再加一层判断不就可以解决 <strong>“这个”</strong> 问题吗？确实如此，来看代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 下午2:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyDoubleCheckSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazyDoubleCheckSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyDoubleCheckSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里判断是为了过滤不必要的同步加锁，因为如果已经实例化了，就可以直接返回了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果未初始化，则对资源进行上锁保护，待实例化完成之后进行释放（注意，可能多个线程会同时进入）</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyDoubleCheckSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里的if作用是：如果后面的进程在前面一个线程实例化完成之后拿到锁，进入这个代码块，</span>                <span class="token comment" spellcheck="true">// 显然，资源已经被实例化过了，所以需要进行判断过滤</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>大家觉得经过这样改造是不是就完美了呢？在我们习惯性的“讲道理”的思维模式看来，好像确实没什么问题，但是，程序是计算机在执行；什么意思呢？</p><p>在 <code>instance = new LazyDoubleCheckSingleton();</code> 这段代码执行的时候，计算机内部并非简单的一步操作，也就是非原子操作，在<code>JVM</code>中，这一行代码大概做了这么几件事情：</p><ol><li>给 <code>instance</code> 分配内存</li><li>调用 <code>LazyDoubleCheckSingleton</code> 的构造函数来初始化成员变量</li><li>将<code>instance</code>对象指向分配的内存空间（执行完这步 <code>instance</code> 就为非 null 了）</li></ol><p>但是在 <code>JVM</code> 中的即时编译器中存在指令重排序的优化；通俗的来说就是，上面的第二步和第三步的顺序是不能保证的，如果执行顺序是 <code>1 -&gt; 3 -&gt; 2</code> 那么在 3 执行完毕、2 未执行之前，被另外一个线程 A 抢占了，这时 <code>instance</code> 已经是非 null 了（但却没有初始化），所以线程 A 会直接返回 <code>instance</code>，然后被程序调用，就会报错。</p><blockquote><p>当然，这种情况是很难测试出来的，但是确实会存在这么一个问题，所以我们必须解决它，解决方式也很简单，就是 j 将 <code>instance</code> 加上 <code>volatile</code> 关键字。</p></blockquote><p>所以相对较完美的实现方式是：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 下午2:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyDoubleCheckSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> LazyDoubleCheckSingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyDoubleCheckSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里判断是为了过滤不必要的同步加锁，因为如果已经实例化了，就可以直接返回了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果未初始化，则对资源进行上锁保护，待实例化完成之后进行释放（注意，可能多个线程会同时进入）</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyDoubleCheckSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里的if作用是：如果后面的进程在前面一个线程实例化完成之后拿到锁，进入这个代码块，</span>                <span class="token comment" spellcheck="true">// 显然，资源已经被实例化过了，所以需要进行判断过滤</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyDoubleCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码见文末说明</p><h3 id="静态内部类懒汉式"><a href="#静态内部类懒汉式" class="headerlink" title="静态内部类懒汉式"></a>静态内部类懒汉式</h3><p>上面的双重锁检查形式的单例，对于日常开发来说，确实够用了，但是在代码中使用<code>synchronized</code>关键字 ，总归是要上锁，上锁就会存在一个性能问题。难道就没有更好的方案吗？别说，还真有，我们从类初始化的角度来考虑，这就是这里所要说到的静态内部类的方式。</p><p>废话不多说，直接看代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * * @author eamon.zhang * @date 2019-09-30 下午2:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInnerClassSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">LazyInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注意关键字final，保证方法不被重写和重载</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LazyInnerClassSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> LazyHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LazyHolder</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意 final 关键字（保证不被修改）</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LazyInnerClassSingleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进行多线程测试：</p><pre><code>pool-1-thread-9 : com.eamon.javadesignpatterns.singleton.lazy.inner.LazyInnerClassSingleton@88b7fa2pool-1-thread-1 : com.eamon.javadesignpatterns.singleton.lazy.inner.LazyInnerClassSingleton@88b7fa2pool-1-thread-6 : com.eamon.javadesignpatterns.singleton.lazy.inner.LazyInnerClassSingleton@88b7fa2...</code></pre><p>结果都是同一个对象实例。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>这种方式即解决了饿汉式的内存浪费问题，也解决了<code>synchronized</code> 所带来的性能问题</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>利用的原理就是类的加载初始化顺序：</p><ol><li>当类不被调用的时候，类的静态内部类是不会进行初始化的，这就避免了内存浪费问题；</li><li>当有方法调用 <code>getInstance()</code>方法时，会先初始化静态内部类，而静态内部类中的成员变量是 <code>final</code> 的，所以即便是多线程，其成员变量是不会被修改的，所以就解决了添加 <code>synchronized</code> 所带来的性能问题</li></ol><hr><p>首先感谢也恭喜大家能够看到这里，因为我想告诉你，上面所有的单例模式似乎还存在一点小问题 —— 暴力破坏。解决这一问题的方式就是下面提到的枚举类型单例。</p><p>至于缘由和为何枚举能够解决这个问题，同样，篇幅原因，我将在后面单独开一篇文章来说明。</p><hr><p>下面我们先来讲讲注册式单例。</p><h2 id="3、注册式（登记式）单例"><a href="#3、注册式（登记式）单例" class="headerlink" title="3、注册式（登记式）单例"></a>3、注册式（登记式）单例</h2><p>注册式单例又称为登记式单例，就是将每一个实例都登记到某一个地方，使用唯一的标识获取实例。</p><p>注册式单例有两种写法:一种为容器缓存，一种为枚举登记。</p><p>先来看枚举式单例的写法。</p><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><p>废话少说，直接看代码，我们先创建<code>EnumResource</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 下午3:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumResource</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>然后创建<code>EnumSingleton</code>:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 下午3:42 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingleton <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object instance<span class="token punctuation">;</span>    <span class="token function">EnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来看测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-30 下午3:47 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumSingletonTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                EnumSingleton instance <span class="token operator">=</span> EnumSingleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre class=" language-java"><code class="language-java">com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>EnumResource<span class="token annotation punctuation">@3eadb1e7</span></code></pre><p>结果都一样，说明枚举类单例是线程安全的，且是不可破坏的；在 JDK 枚举的语法特殊性，以及反射也为枚举保驾护航，让枚举式单例成为一种比较优雅的实现。</p><p>枚举类单例也是《Effective Java》中所建议使用的。</p><h3 id="容器式单例"><a href="#容器式单例" class="headerlink" title="容器式单例"></a>容器式单例</h3><p>注册式单例还有另外一种写法，利用容器缓存，直接来看代码：</p><p>创建<code>ContainerSingleton</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author EamonZzz * @date 2019-10-06 18:28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContainerSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">ContainerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ioc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ioc<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object object <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    object <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ioc<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> object<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ioc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                Object bean <span class="token operator">=</span> ContainerSingleton                        <span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"com.eamon.javadesignpatterns.singleton.container.Resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre class=" language-java"><code class="language-java">com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>container<span class="token punctuation">.</span>Resource<span class="token annotation punctuation">@42e7420f</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>container<span class="token punctuation">.</span>Resource<span class="token annotation punctuation">@42e7420f</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>container<span class="token punctuation">.</span>Resource<span class="token annotation punctuation">@42e7420f</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>container<span class="token punctuation">.</span>Resource<span class="token annotation punctuation">@42e7420f</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>container<span class="token punctuation">.</span>Resource<span class="token annotation punctuation">@42e7420f</span></code></pre><p>容器式写法适用于创建实例非常多的情况，便于管理。但是，是非线程安全的。</p><p>其实 Spring 中也有相关容器史丹利的实现代码，比如 <code>AbstractAutowireCapableBeanFactory</code> 接口</p><p>至此，注册式单例介绍完毕。</p><hr><h1 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、拓展</h1><h2 id="ThreadLocal-线程单例"><a href="#ThreadLocal-线程单例" class="headerlink" title="ThreadLocal 线程单例"></a>ThreadLocal 线程单例</h2><p>ThreadLocal 不能保证其创建的对象是唯一的，但是能保证在单个线程中是唯一的，并且在单个线程中是天生的线程安全。</p><p>看代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author EamonZzz * @date 2019-10-06 21:40 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">ThreadLocalSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>ThreadLocalSingleton<span class="token operator">></span> instance <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span>ThreadLocalSingleton<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ThreadLocalSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试程序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------- 单线程 start ---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ThreadLocalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ThreadLocalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ThreadLocalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ThreadLocalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ThreadLocalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------- 单线程 end ---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------- 多线程 start ---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ConcurrentExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            ThreadLocalSingleton singleton <span class="token operator">=</span> ThreadLocalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------- 多线程 end ---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre class=" language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 单线程 start <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@1374fbda</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@1374fbda</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@1374fbda</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@1374fbda</span>com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@1374fbda</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 单线程 end <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 多线程 start <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">5</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@2f540d92</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@3ef7ab4e</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">2</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@604ffe2a</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">3</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@50f41c9f</span>pool<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>thread<span class="token operator">-</span><span class="token number">4</span> <span class="token operator">:</span> com<span class="token punctuation">.</span>eamon<span class="token punctuation">.</span>javadesignpatterns<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>threadlocal<span class="token punctuation">.</span>ThreadLocalSingleton<span class="token annotation punctuation">@40821a7a</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> 多线程 end <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></code></pre><p>从测试结果来看，我们不难发现，在主线程中无论调用多少次，获得到的实例都是同一个；在多线程环境下，每个线程获取到了不同的实例。</p><p>所以，在单线程环境中，ThreadLocal 可以达到单例的目的。这实际上是以空间换时间来实现线程间隔离的。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>单例模式可以保证内存里只有一个实例，减少了内存的开销；可避免对资源的浪费。</p><p>单例模式看起来非常简单，实现起来也不难，但是在面试中却是一个高频的面试题。希望大家能够彻底理解。</p><hr><p>本篇文章所涉及的源代码：</p><p><a href="https://github.com/eamonzzz/java-advanced/tree/master/01.DesignPatterns/design-patterns/src/main/java/com/eamon/javadesignpatterns/singleton" target="_blank" rel="noopener">github.com/eamonzzz</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="/posts/ccff2b22.html"/>
      <url>/posts/ccff2b22.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们都知道<code>Java</code>中共有 23 种设计模式，其中工厂模式分为三种，即：简单工厂模式（不在 23 种设计模式之列）、工厂方法模式和抽象工厂模式；我们平时说的工厂模式，其实大都指工厂方法模式，这种模式是我们平时编码中用的频率最高的一种，在<code>Spring</code>源码中就有很多工厂模式的应用，比如 <code>BeanFactory</code>。</p></blockquote><p>下面依次按照简单工厂模式、工厂方法模式、抽象工厂模式的顺序，依次由浅入深说说这三种模式；文章分别从定义、场景、优缺点也示例进行讲解。</p><a id="more"></a><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>简单工厂模式(Simple Factory Pattern)是指由一个工厂对象决定创建出哪一种产品类的实例，简单来说就是，<br>定义一个工厂类，根据传入的参数不同返回不同的实例，被创建的实例具有共同的父类或接口。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>简单工厂适用于工厂类负责创建的对象较少的场景，且客户端只需要传入工厂类的参数，对于如何创建对象的逻辑不需要关心。总结一下就是：</p><ol><li>需要创建的对象较少；</li><li>客户端不关心对象的创建过程；</li></ol><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>实现了对责任的分割，提供了专门的工厂类用于创建对象</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>工厂类的职责相对过重，不易于扩展过于复杂的产品结构，不符合开闭原则（可解决）</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>接下来我们构造一个场景来看看简单工厂模式的应用：现在手机更新换代的比较快，手机厂商每年基本都会在不同时间或者在同一时间发布生产不同型号和配置的手机。</p><p>假设某手机公司最近发布了型号为 A、B 的手机，其中生产任务交给代工厂去生产；我们都知道不管什么类型的手机都属于手机，所以我们先创建一个手机类<code>Phone</code>，并在其中声明一个公共的手机型号方法<code>type</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 上午10:55 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后定义具体的手机类型：</p><p>型号 A：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 上午11:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneA</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"型号为A的手机！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>型号 B：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 上午11:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneB</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"型号为B的手机！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建手机代工厂 <code>PhoneFactory</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 上午10:54 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Phone <span class="token function">product</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"A"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PhoneA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"B"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PhoneB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 上午11:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PhoneFactory phoneFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phoneFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phoneFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre><code>型号为A的手机！型号为B的手机！</code></pre><blockquote><p>当然，为了方便调用，<code>PhoneFactory</code> 中的<code>product()</code>也可以写成静态的。</p></blockquote><p>类图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d70bc56a6a96e1?w=1068&amp;h=822&amp;f=png&amp;s=241501" alt=""></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="解决不符合开闭原则问题"><a href="#解决不符合开闭原则问题" class="headerlink" title="解决不符合开闭原则问题"></a>解决不符合开闭原则问题</h3><p>上面的示例中，客户端调用是简单了，但如果我们业务继续扩展，增加一个型号 C，那么上面的工厂方法中的<code>product()</code> 方法就得再次修改逻辑。不符合开闭原则；因此我们客户考虑对其进行进一步优化，利用反射技术修改<code>product()</code>方法：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Phone <span class="token function">product</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>null <span class="token operator">==</span> className <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Phone<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>修改客户端调用代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PhoneFactory phoneFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    phoneFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token string">"com.eamon.javadesignpatterns.factory.PhoneA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    phoneFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token string">"com.eamon.javadesignpatterns.factory.PhoneB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>经过优化之后，今后再增加型号，就不用去修改工厂方法了；但是又有一个问题，方法参数是很长的字符串，可控性有待提升，而且还需要强制转型，不方便阅读和维护，所以进一步改造：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Phone <span class="token function">product</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优化客户端调用代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PhoneFactory phoneFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    phoneFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span>PhoneA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    phoneFactory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span>PhoneB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再来看一下类图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d7128f0d02bc5b?w=1032&amp;h=528&amp;f=png&amp;s=110793" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d7129cd9ccff4a?w=1054&amp;h=478&amp;f=png&amp;s=119674" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>简单工厂模式在 JDK 源码中也无处不足，比如常用的 <code>Calendar</code>类中<code>Calendar.getInstance()</code>方法，跟进源码到<code>createCalendar(TimeZone zone,Locale aLocale)</code>就可以看出。</p><p>还有就是 常用的<code>logback</code>，我们可以看到 <code>LoggerFactory</code> 中有多个重载的方法 <code>getLogger()</code>:</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> Logger <span class="token function">getLogger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ILoggerFactory iLoggerFactory <span class="token operator">=</span> <span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> iLoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> Logger <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getLogger</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>工厂方法模式(Fatory Method Pattern)是指定义一个创建对象的接口，但让实现这个 接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行。</p><p>在工厂方法模式中用户只需要关心所需产品对应的工厂，无须关心创建细节，而且加入新的产品符 合开闭原则。</p><p>工厂方法模式主要解决产品扩展的问题，在简单工厂中，随着产品链的丰富，如果每个手机的创建逻辑有区别的话，工厂的职责会变得越来越多，有点像万能工厂，并不便于维护。根据单一职责原则我们将职能继续拆分，专人干专事。</p><h2 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h2><p>工厂方法适用于以下场景:</p><ol><li>创建对象需要大量重复的代码。</li><li>客户端(应用层)不依赖于产品类实例如何被创建、实现等细节。</li><li>一个类通过其子类来指定创建哪个对象。</li></ol><h2 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>具有良好的封装性，代码结构清晰，井底了模块间的耦合。</li><li>拓展性非常优秀。（在增加产品类的情况下，只要修改具体的工厂类或扩展一个工厂类）</li><li>屏蔽了产品类。（产品类的实现如何变化，调用者不需要关心）</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点:"></a>缺点:</h3><p>1、类的个数容易过多，增加复杂度。<br>2、增加了系统的抽象性和理解难度。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>A 型号手机由<code>PhoneA</code>工厂创建，B 型号手机由<code>PhoneB</code>工厂创建，对工厂本身也做一个抽象。来看代码，先创建 <code>PhoneFactory</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午1:45 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>   Phone <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>分别创建子工厂 <code>PhoneAFactory</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午1:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneAFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PhoneA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>PhoneBFactory</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午1:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneBFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PhoneFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Phone <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PhoneB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午1:54 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneFactoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PhoneFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneAFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneBFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试结果：</p><pre class=" language-java"><code class="language-java">型号为A的手机！型号为B的手机！</code></pre><p>再看一下类图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d714bd67a5ede9?w=1242&amp;h=796&amp;f=png&amp;s=289298" alt=""></p><h2 id="拓展-1"><a href="#拓展-1" class="headerlink" title="拓展"></a>拓展</h2><p>再来看看 logback 中工厂方法模式的应用，看看类图就 OK 了：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d714fd03728d0b?w=1436&amp;h=570&amp;f=png&amp;s=286476" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d7151de76658c1?w=1092&amp;h=598&amp;f=png&amp;s=159497" alt=""></p><hr><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>抽象工厂模式(Abastract Factory Pattern)是指提供一个创建一系列相关或相互依赖对象的接口，无需指定他们具体的类。</p><p>客户端（应用层）不依赖于产品类实例如何被创建、实现等细节。强调的是一系列相关的产品对象(属于同一产品族)一起使用创建对象需要大量重复的代码。需要提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>为了便于大家理解抽象工厂，我们先了解两个概念产品等级结构和产品族，看下面的图:<br><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d7164bf849dc32?w=1142&amp;h=708&amp;f=png&amp;s=176290" alt=""><br>从上图中看出有正方形，圆形和三角形三种图形，相同颜色深浅的就代表同一个产品族，相同形状的代表同一个产品等级结构。同样可以从生活中来举例，比如，美的电器生产多种家用电器。那么上图中，颜色最深的正方形就代表美的洗衣机、颜色最深的圆形代表美的空调、颜色最深的三角形代表美的热水器，颜色最深的一排都属于美的品牌，都是美的电器这个产品族。再看最右侧的三角形，颜色最深的我们指定了代表美的热水器，那么第二排颜色稍微浅一点的三角形，代表海信的热水器。同理，同一产品结构下还有格力热水器，格力空调，格力洗衣机。</p><p>再看下面这张图，最左侧的箭头代表具体的工厂，有美的工厂、海信工厂、格力工厂。每个品牌的工厂都生产洗衣机、热水器、空调。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/27/16d716bc786f4628?w=1356&amp;h=742&amp;f=png&amp;s=237854" alt=""></p><p>通过上面两张图的对比理解，相信大家对抽象工厂有了非常形象的理解。</p><h2 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h2><p>一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式。简单来说：</p><ol><li>和工厂方法一样客户端不需要知道它所创建的对象的类。</li><li>需要一组对象共同完成某种功能时。并且可能存在多组对象完成不同功能的情况。</li><li>系统结构稳定，不会频繁的增加对象。（因为一旦增加就需要修改原有代码，不符合开闭原则）</li></ol><h2 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ul><li>封装性，每个产品的实现类不是高层模块要关心的，它要关心的是接口，不关心对象是如何创建的，只要知道工厂类是谁，就能创建出一个需要的对象，省时省力。</li><li>产品族内的约束为非公开状态。</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口</li><li>增加了系统的抽象性和理解难度</li></ul><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p>比如现在有一个应用，假如是某视频软件，需要在三个不同的平台（Windows、IOS、Android）上运行，该应用针对每套系统都设计了一套上传控制器（<code>UploadController</code>）、播放控制（<code>DisplayController</code>），下面通过抽象工厂模式来设计该软件。</p><p>视频软件里边的各个平台的<code>UploadController</code>和<code>DisplayController</code>应该是我们最终生产的具体产品。所以新建两个抽象产品接口。</p><p><code>UploadController</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午2:59 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>DisplayController</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午2:59 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisplayController</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义抽象工厂<code>VideoPlayerFactory</code>类，它能够创建<code>UploadController</code>和<code>DisplayController</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象工厂是主入口，在Spring中应用的最广泛的一种设计模式，易于扩展 * * @author eamon.zhang * @date 2019-09-27 下午3:04 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoPlayerFactory</span> <span class="token punctuation">{</span>    DisplayController <span class="token function">createDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UploadController <span class="token function">createUploadController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后在各个平台创建具体的 <code>UploadController</code>和<code>DisplayController</code>：</p><p>创建适用于<strong>Windows</strong>的<code>UploadController</code>和<code>DisplayController</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsUploadController</span> <span class="token keyword">implements</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows 上传控制器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsDisplayController</span> <span class="token keyword">implements</span> <span class="token class-name">DisplayController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows 上的播放器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建适用于<strong>IOS</strong>的<code>UploadController</code>和<code>DisplayController</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IosUploaderController</span> <span class="token keyword">implements</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IOS 上传控制器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IosDisplayController</span> <span class="token keyword">implements</span> <span class="token class-name">DisplayController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"IOS 上的播放器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建适用于<strong>Android</strong>的<code>UploadController</code>和<code>DisplayController</code>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:10 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidUploaderController</span> <span class="token keyword">implements</span> <span class="token class-name">UploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Android 上传控制器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidDisplayController</span> <span class="token keyword">implements</span> <span class="token class-name">DisplayController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Android 上的播放器！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在各平台具体的工厂类中完成上传控制器和播放控制器的创建过程：</p><p>创建<code>WindowsFactory</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:15 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsFactory</span> <span class="token keyword">implements</span> <span class="token class-name">VideoPlayerFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> DisplayController <span class="token function">createDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UploadController <span class="token function">createUploadController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsUploadController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建<code>IosFactory</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IosFactory</span> <span class="token keyword">implements</span> <span class="token class-name">VideoPlayerFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> DisplayController <span class="token function">createDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IosDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UploadController <span class="token function">createUploadController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IosUploaderController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建<code>AndroidFactory</code>类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AndroidFactory</span> <span class="token keyword">implements</span> <span class="token class-name">VideoPlayerFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> DisplayController <span class="token function">createDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UploadController <span class="token function">createUploadController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidUploaderController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来看客户端调用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-27 下午3:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VideoPlayerFactoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">VideoPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        VideoPlayerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// IOS</span><span class="token comment" spellcheck="true">//        factory = new IosFactory();</span><span class="token comment" spellcheck="true">//        // Android</span><span class="token comment" spellcheck="true">//        factory = new AndroidFactory();</span>        UploadController uploadController <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createUploadController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DisplayController displayController <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createDisplayController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uploadController<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        displayController<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以调用 Windows 为例，结果：</p><pre class=" language-java"><code class="language-java">Windows 上传控制器！Windows 上的播放器！</code></pre><p><strong>上面就是针对不同平台只通过创建对应的工厂对象就完成了上传控制器和播放控制器的创建。抽象工厂非常完美清晰地描述这样一层复杂的关系。但是，不知道大家有没有发现，如果我们再继续扩展功能，将下载器也加入到产品中，那么我们的代码从抽象工厂，到具体工厂要全部调整，很显然不符合开闭原则。因此就有了上面优缺点中所说的缺点。</strong></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在实际应用中，我们千万不能犯强迫症甚至有洁癖。在实际需求中产品等级结构升级是非常正常的一件事情。我们可以根据实际情况，只要不是频繁升级，可以不遵循开闭原则。代码每半年升级一次或者每年升级一次又有何不可呢?</p><p>源码：<a href="https://github.com/eamonzzz/java-design-patterns/tree/master/src/test/java/com/eamon/javadesignpatterns/factory" target="_blank" rel="noopener">github.com</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-七大设计原则（四）-合成复用原则与设计原则总结</title>
      <link href="/posts/2736756b.html"/>
      <url>/posts/2736756b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单介绍一下七大设计原则：</p></blockquote><ol><li><strong>开闭原则</strong>：是所有面向对象设计的核心，对扩展开放，对修改关闭</li><li><strong>依赖倒置原则</strong>：针对接口编程，依赖于抽象而不依赖于具体</li><li><strong>单一职责原则</strong>：一个接口只负责一件事情，只能有一个原因导致类变化</li><li><strong>接口隔离原则</strong>：使用多个专门的接口，而不是使用一个总接口</li><li><strong>迪米特法则（最少知道原则）</strong>：只和朋友交流（成员变量、方法输入输出参数），不和陌生人说话，控制好访问修饰符</li><li><strong>里氏替换原则</strong>：子类可以扩展父类的功能，但不能改变父类原有的功能</li><li><strong>合成复用原则</strong>：尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的</li></ol><a id="more"></a><hr><h1 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>合成复用原则(Composite/Aggregate Reuse Principle,CARP)是指尽量使用对象组 合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的。可以使系统更加灵 活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。</p><p>继承我们叫做白箱复用，相当于把所有的实现细节暴露给子类。组合/聚合也称之为黑箱 复用，对类以外的对象是无法获取到实现细节的。要根据具体的业务场景来做代码设计， 其实也都需要遵循 OOP 模型。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>还是以数据库操作为例，先来创建 <code>DBConnection</code> 类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DBConnection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MySQL 数据库连接"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建 <code>ProductDao</code> 类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DBConnection dbConnection<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDbConnection</span><span class="token punctuation">(</span>DBConnection dbConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dbConnection <span class="token operator">=</span> dbConnection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String conn <span class="token operator">=</span> dbConnection<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用"</span> <span class="token operator">+</span> conn <span class="token operator">+</span> <span class="token string">"增加产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这就是一种非常典型的合成复用原则应用场景。但是，目前的设计来说，<code>DBConnection</code> 还不是一种抽象，不便于系统扩展。目前的系统支持 <code>MySQL</code> 数据库连接，假设业务发生 变化，数据库操作层要支持 <code>Oracle</code> 数据库。当然，我们可以在 <code>DBConnection</code> 中增加对 <code>Oracle</code> 数据库支持的方法。但是违背了开闭原则。其实，我们可以不必修改 <code>Dao</code> 的代码， 将 <code>DBConnection</code> 修改为 <code>abstract</code>，来看代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:42 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DBConnection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后，将 <code>MySQL</code> 的逻辑抽离:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySQLConnection</span> <span class="token keyword">extends</span> <span class="token class-name">DBConnection</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MySQL 数据库连接"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再创建 <code>Oracle</code> 支持的逻辑:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:47 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleConnection</span> <span class="token keyword">extends</span> <span class="token class-name">DBConnection</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Oracle 数据库连接"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体选择交给应用层，来看一下类图:<br><img src="https://user-gold-cdn.xitu.io/2019/9/26/16d6b797d3f3f41b?w=1458&amp;h=674&amp;f=png&amp;s=298175" alt=""></p><hr><h1 id="设计原则总结"><a href="#设计原则总结" class="headerlink" title="设计原则总结"></a>设计原则总结</h1><p>学习设计原则，学习设计模式的基础。在实际开发过程中，并不是一定要求所有代码都 遵循设计原则，我们要考虑人力、时间、成本、质量，不是刻意追求完美，要在适当的 场景遵循设计原则，体现的是一种平衡取舍，帮助我们设计出更加优雅的代码结构。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-七大设计原则（三）-迪米特法则与里氏替换原则</title>
      <link href="/posts/9bc5df88.html"/>
      <url>/posts/9bc5df88.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>简单介绍一下七大设计原则：</p></blockquote><ol><li><strong>开闭原则</strong>：是所有面向对象设计的核心，对扩展开放，对修改关闭</li><li><strong>依赖倒置原则</strong>：针对接口编程，依赖于抽象而不依赖于具体</li><li><strong>单一职责原则</strong>：一个接口只负责一件事情，只能有一个原因导致类变化</li><li><strong>接口隔离原则</strong>：使用多个专门的接口，而不是使用一个总接口</li><li><strong>迪米特法则（最少知道原则）</strong>：只和朋友交流（成员变量、方法输入输出参数），不和陌生人说话，控制好访问修饰符</li><li><strong>里氏替换原则</strong>：子类可以扩展父类的功能，但不能改变父类原有的功能</li><li><strong>合成复用原则</strong>：尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的</li></ol><a id="more"></a><hr><h1 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>迪米特原则(Law of Demeter LoD)是指一个对象应该对其他对象保持最少的了解，又 叫最少知道原则(Least Knowledge Principle,LKP)，尽量降低类与类之间的耦合。</p><p>迪米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输 出参数中的类都可以称之为成员朋友类，而出现在方法体内部的类不属于朋友类。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>现在来设计一个权限系统，Boss 需要查看目前发布到线上的课程数量。这时候，Boss 要找到 TeamLeader 去进行统计，TeamLeader 再把统计结果告诉 Boss。接下来我们还 是来看代码:</p><p><code>Course</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>TeamLeader</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamLeader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkNumberOfCourses</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Course<span class="token operator">></span> courseList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目前已发布的课程数量是:"</span> <span class="token operator">+</span> courseList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Boss</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commandCheckNumber</span><span class="token punctuation">(</span>TeamLeader teamLeader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//模拟 Boss 一页一页往下翻页，TeamLeader 实时统计</span>        List<span class="token operator">&lt;</span>Course<span class="token operator">></span> courseList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            courseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        teamLeader<span class="token punctuation">.</span><span class="token function">checkNumberOfCourses</span><span class="token punctuation">(</span>courseList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Boss boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TeamLeader teamLeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeamLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boss<span class="token punctuation">.</span><span class="token function">commandCheckNumber</span><span class="token punctuation">(</span>teamLeader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>写到这里，其实功能已经都已经实现，代码看上去也没什么问题。根据迪米特原则，<code>Boss</code> 只想要结果，不需要跟 <code>Course</code> 产生直接的交流。而 <code>TeamLeader</code> 统计需要引用 <code>Course</code> 对象。<code>Boss</code> 和 <code>Course</code> 并不是朋友，从下面的类图就可以看出来:<br><img src="https://user-gold-cdn.xitu.io/2019/9/26/16d6b2d0c2ce7b6d?w=1386&amp;h=796&amp;f=png&amp;s=240662" alt=""></p><p>下面来对代码进行改造:<br><code>TeamLeader</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeamLeader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkNumberOfCourses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Course<span class="token operator">></span> courseList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            courseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目前已发布的课程数量是:"</span> <span class="token operator">+</span> courseList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Boss</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:17 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commandCheckNumber</span><span class="token punctuation">(</span>TeamLeader teamLeader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        teamLeader<span class="token punctuation">.</span><span class="token function">checkNumberOfCourses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再来看下面的类图，Course 和 Boss 已经没有关联了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/26/16d6b33ad71b341f?w=1250&amp;h=884&amp;f=png&amp;s=215008" alt=""></p><p>学习软件设计原则，千万不能形成强迫症。碰到业务复杂的场景，我们需要随机应变。</p><hr><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>里氏替换原则(Liskov Substitution Principle,LSP)是指如果对每一个类型为 T1 的对 象 o1,都有类型为 T2 的对象 o2,使得以 T1 定义的所有程序 P 在所有的对象 o1 都替换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p><p>定义看上去还是比较抽象，我们重新理解一下，可以理解为一个软件实体如果适用一个 父类的话，那一定是适用于其子类，所有引用父类的地方必须能透明地使用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变。根据这个理解，我们总结一下:</p><p><strong>引申含义</strong>：子类可以扩展父类的功能，但不能改变父类原有的功能。</p><ol><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类中可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件(即方法的输入/入参)要比父类 方法的输入参数更宽松。</li><li>当子类的方法实现父类的方法时(重写/重载或实现抽象方法)，方法的后置条件(即 方法的输出/返回值)要比父类更严格或相等。</li></ol><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>在前面讲开闭原则的时候埋下了一个伏笔，我们记得在获取折后时重写覆盖了父类的 <code>getPrice()</code>方法，增加了一个获取原价格的方法 <code>getOriginPrice()</code>，显然就违背了里氏替换 原则。我们修改一下代码，不应该覆盖 <code>getPrice()</code>方法，增加 <code>getDiscountPrice()</code>方法:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午10:36 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NovelDiscountBook</span> <span class="token keyword">extends</span> <span class="token class-name">NovelBook</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">NovelDiscountBook</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span> String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDiscountPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.85</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用里氏替换原则有以下优点:</p><ol><li>约束继承泛滥，开闭原则的一种体现。</li><li>加强程序的健壮性，同时变更时也可以做到非常好的兼容性，提高程序的维护性、扩 展性。降低需求变更时引入的风险。</li></ol><p>现在来描述一个经典的业务场景，用正方形、矩形和四边形的关系说明里氏替换原则， 我们都知道正方形是一个特殊的长方形，那么就可以创建一个长方形父类 <code>Rectangle</code> 类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:59 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> height<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">long</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">long</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建正方形 <code>Square</code> 类继承长方形:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">long</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">long</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">long</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在测试类中创建 <code>resize()</code>方法，根据逻辑长方形的宽应该大于等于高，我们让高一直自增， 知道高等于宽变成正方形:</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span>Rectangle rectangle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> rectangle<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rectangle<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"width:"</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",height:"</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"resize 方法结束"</span> <span class="token operator">+</span>            <span class="token string">"\nwidth:"</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",height:"</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Rectangle rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rectangle<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rectangle<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resize</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结果:<br><img src="https://user-gold-cdn.xitu.io/2019/9/26/16d6b50b2a34433e?w=1436&amp;h=820&amp;f=png&amp;s=532433" alt=""></p><p>发现高比宽还大了，在长方形中是一种非常正常的情况。现在我们再来看下面的代码， 把长方形 <code>Rectangle</code> 替换成它的子类正方形 <code>Square</code>，修改测试代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Square square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    square<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resize</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这时候我们运行的时候就出现了死循环，违背了里氏替换原则，将父类替换为子类后， 程序运行结果没有达到预期。因此，我们的代码设计是存在一定风险的。里氏替换原则 只存在父类与子类之间，约束继承泛滥。我们再来创建一个基于长方形与正方形共同的 抽象四边形 <code>Quadrangle</code> 接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:12 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Quadrangle</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>修改长方形 <code>Rectangle</code> 类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午9:59 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Quadrangle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> height<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> width<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">long</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">long</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改正方形类 <code>Square</code> 类:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-26 上午10:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Quadrangle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">long</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时，如果我们把 <code>resize()</code>方法的参数换成四边形 <code>Quadrangle</code> 类，方法内部就会报错。</p><p>因为正方形 <code>Square</code> 已经没有了 <code>setWidth()</code>和 <code>setHeight()</code>方法了。因此，为了约束继承 泛滥，<code>resize()</code>的方法参数只能用 <code>Rectangle</code> 长方形。当然，我们在后面的设计模式系列文章中 中还会继续深入讲解。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-七大设计原则（二）</title>
      <link href="/posts/bc40f739.html"/>
      <url>/posts/bc40f739.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单介绍一下七大设计原则：<br> <strong>开闭原则</strong>：是所有面向对象设计的核心，对扩展开放，对修改关闭<br> <strong>依赖倒置原则</strong>：针对接口编程，依赖于抽象而不依赖于具体<br> <strong>单一职责原则</strong>：一个接口只负责一件事情，只能有一个原因导致类变化<br> <strong>接口隔离原则</strong>：使用多个专门的接口，而不是使用一个总接口<br> <strong>迪米特法则（最少知道原则）</strong>：只和朋友交流（成员变量、方法输入输出参数），不和陌生人说话，控制好访问修饰符<br> <strong>里氏替换原则</strong>：子类可以扩展父类的功能，但不能改变父类原有的功能<br> <strong>合成复用原则</strong>：尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的</p></blockquote><a id="more"></a><hr><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>单一职责(Simple Responsibility Pinciple，SRP)是指不要存在多于一个导致类变更 的原因。</strong></p><p>假设我们有一个 Class 负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障。这样一来，这个 Class 存在两个导 致类变更的原因。如何解决这个问题呢?我们就要给两个职责分别用两个 Class 来实现， 进行解耦。后期需求变更维护互不影响。这样的设计，可以降低类的复杂度，提高类的 可读性，提高系统的可维护性，降低变更引起的风险。总体来说就是一个 Class/Interface/Method 只负责一项职责。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>接下来我们参考《设计模式之禅》一书中所提到关于用户信息管理的示例来举例：</p><p>新建用户信息<code>IUserInfo</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:07 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setUserID</span><span class="token punctuation">(</span>String userID<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">changePassword</span><span class="token punctuation">(</span>String oldPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mapUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addOrg</span><span class="token punctuation">(</span><span class="token keyword">int</span> orgID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addRole</span><span class="token punctuation">(</span><span class="token keyword">int</span> roleID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>用户信息维护类图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d677cb386f7dd9?w=506&amp;h=422&amp;f=png&amp;s=171051" alt="用户信息维护类图"></p><p>如果像这样子来设计，即使是一个初级程序员也可以看出这个解耦设计得有问题，用户的属性和用户的行为没有分离开。应该把用户的信息抽离成为一个<code>BO</code>，把行为抽离成为一个<code>Biz</code>（业务逻辑）。然后我们修改这个接口。<br>创建 <code>IUserBo</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:18 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserBO</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setUserID</span><span class="token punctuation">(</span>String userID<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getUserID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>创建 <code>IUserBiz</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:18 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserBiz</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">changePassword</span><span class="token punctuation">(</span>String oldPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">mapUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addOrg</span><span class="token punctuation">(</span><span class="token keyword">int</span> orgID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">addRole</span><span class="token punctuation">(</span><span class="token keyword">int</span> roleID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>职责划分后的类图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d678463759028a?w=962&amp;h=528&amp;f=png&amp;s=222695" alt=""></p><p>我们将<code>IUserInfo</code>拆分为了<code>IUserBo</code>和<code>IUserBiz</code>。我们就实现了两个类的单一职责,也就是让引起他们变化原因只有一种,并且让相关性强的内容聚合在一个类内部。</p><p>但是，我们在实际开发中会项目依赖，组合，聚合这些关系，还有还有项目的规模，周期，技术人员的水平，对进度的把控，很多类都不符合单一职责。但是，我们在编写代码的过程，<strong>尽可能</strong>地让接口和方法保持 <strong>单一职责</strong>，对我们项目后期的维护是有很大帮助的。</p><hr><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>接口隔离原则(Interface Segregation Principle, ISP)是指用多个专门的接口，而不使 用单一的总接口，客户端不应该依赖它不需要的接口。这个原则指导我们在设计接口时 应当注意一下几点:</p><ol><li>一个类对一类的依赖应该建立在最小的接口之上。</li><li>建立单一接口，不要建立庞大臃肿的接口。</li><li><strong>尽量细化接口，接口中的方法尽量少(不是越少越好，一定要适度)</strong>。</li></ol><p>接口隔离原则符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、 可扩展性和可维护性。我们在设计接口的时候，要多花时间去思考，要考虑业务模型，包括以后有可能发生变更的地方还要做一些预判。所以，对于抽象，对业务模型的理解 是非常重要的。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>下面我们来看一段代码，写一个动物行为的抽象:</p><p><code>IAnimal</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:56 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Bird</code> 类实现:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">implements</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Dog</code> 类实现:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">IAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看出，<code>Bird</code> 的 <code>swim()</code>方法可能只能空着，<code>Dog</code> 的 <code>fly()</code>方法显然不可能的。这时候，我们针对不同动物行为来设计不同的接口，分别设计 <code>IEatAnimal</code>，<code>IFlyAnimal</code> 和 <code>ISwimAnimal</code> 接口，来看代码:</p><p><code>IEatAnimal</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:59 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEatAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>IFlyAnimal</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午5:01 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFlyAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ISwimAnimal</code> 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午5:02 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISwimAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Dog</code> 只实现 <code>IEatAnimal</code> 和 <code>ISwimAnimal</code> 接口:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 下午4:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">IEatAnimal</span><span class="token punctuation">,</span>ISwimAnimal <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来看下两种类图的对比，还是非常清晰明了的:</p><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d67aab89a40f11?w=970&amp;h=700&amp;f=png&amp;s=189474" alt=""><br><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d67abb89df5995?w=1218&amp;h=566&amp;f=png&amp;s=208566" alt=""></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>内容为原创，转发请注明出处！<br>部分内容参考网络，侵删！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-七大设计原则（一）</title>
      <link href="/posts/8c561be1.html"/>
      <url>/posts/8c561be1.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>简单介绍一下七大设计原则：<br>开闭原则：是所有面向对象设计的核心，对扩展开放，对修改关闭<br>依赖倒置原则：针对接口编程，依赖于抽象而不依赖于具体<br>单一职责原则：一个接口只负责一件事情，只能有一个原因导致类变化<br>接口隔离原则：使用多个专门的接口，而不是使用一个总接口<br>迪米特法则（最少知道原则）：只和朋友交流（成员变量、方法输入输出参数），不和陌生人说话，控制好访问修饰符<br>里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能<br>合成复用原则：尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的</p></blockquote><a id="more"></a><hr><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>指一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</strong><br>所谓的开闭，也正是对扩展和修改两个行为的一个原则。强调的是用抽象构建框架，用实现扩展细节。可以提高软件系统的可复用性及可维护性。开闭原则，是面向对象设计中最基础的设计原则。它指导我们如何建立稳定灵活的系统，例如：我们版本更新，我尽可能不修改源代码，但是可以增加新功能。</p><p>在现实生活中对于开闭原则也有体现。比如，很多互联网公司都实行弹性制作息时间，规定每天工作 8 小时。意思就是说，对于每天工作 8 小时这个规定是关闭的，但是你什么时候来，什么时候走是开放的。早来早走，晚来晚走。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>实现开闭原则的核心思想就是面向抽象编程，接下来我们来看一段代码：</p><p>以书店销售书籍为例，创建书籍接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午10:26 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 书籍名称</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 价格</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 作者</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>书籍分为很多类，比如有小说类等，创建小说类书籍：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午10:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NovelBook</span> <span class="token keyword">implements</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 书名</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 售价</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> price<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 作者</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过构造函数传递数据数据</span>    <span class="token keyword">public</span> <span class="token function">NovelBook</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span> String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取书名</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取价格</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取作者</span>    <span class="token keyword">public</span> String <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>author<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在我们要给小说类书籍做一个活动，价格优惠。如果修改 NovelBook 中的 getPrice()方法，则会存在一定的风险，可能影响其他地方的调用结果。我们如何在不修改原有代码前提前下，实现价格优惠这个功能呢？现在，我们再写一个处理优惠逻辑的类，NovelDiscountBook 类（思考一下为什么要叫 NovelDiscountBook，而不叫 DiscountBook）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午10:36 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NovelDiscountBook</span> <span class="token keyword">extends</span> <span class="token class-name">NovelBook</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">NovelDiscountBook</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> price<span class="token punctuation">,</span> String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> price<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getOriginPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.85</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h3><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66fbff969fd5a?w=676&amp;h=548&amp;f=png&amp;s=73677" alt="image.png"></p><hr><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>依赖倒置原则（DependenceInversionPrinciple,DIP）是指设计代码结构时，高层模块不应该依赖底层模块，二者都应该依赖其抽象。抽象不应该依赖细节；细节应该依赖抽象。通过依赖倒置，可以减少类与类之间的耦合性，提高系统的稳定性，提高代码的可读性和可维护性，并能够降低修改程序所造成的风险。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>我们以阅读书籍为例，先创建一个 Eamon 类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eamon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readNotreDame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Eamon 在阅读 《巴黎圣母院》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readTheOldManAndTheSea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Eamon 在阅读 《老人与海》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>写个测试类调用一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Eamon eamon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eamon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">readNotreDame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">readTheOldManAndTheSea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Eamon 目前正在阅读者两本书。但是学习是无止境的，Eamon 读完这些书之后还想读《天龙八部》。这个时候，业务扩展，我们的代码要从底层到高层（调用层）一次修改代码。在 Eamon 类中添加 readTianLongBaBu()的方法，在高层也要追加调用。如此一来，系统发布以后，实际上是非常不稳定的，在修改代码的同时也会带来意想不到的风险。接下来我们优化代码，创建一个课程的抽象 IBook 接口：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:20 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后写<code>NotreDameBook</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotreDameBook</span> <span class="token keyword">implements</span> <span class="token class-name">IBook</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Eamon 在阅读 《巴黎圣母院》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再写  <code>TheOldManAndTheSeaBook</code>  类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheOldManAndTheSeaBook</span> <span class="token keyword">implements</span> <span class="token class-name">IBook</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Eamon 在阅读 《老人与海》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改<code>Eamon</code>类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eamon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>IBook iBook<span class="token punctuation">)</span><span class="token punctuation">{</span>        iBook<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来看调用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Eamon eamon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eamon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotreDameBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TheOldManAndTheSeaBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们这时候再看来代码，Eamon 再想读任何书，对于新书，我只需要新建一个类，通过传参的方式告诉 Eamon，而不需要修改底层代码。实际上这是一种大家非常熟悉的方式，叫依赖注入。注入的方式还有构造器方式和 setter 方式。我们来看构造器注入方式：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eamon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Eamon</span><span class="token punctuation">(</span>IBook iBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iBook <span class="token operator">=</span> iBook<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> IBook iBook<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iBook<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看调用代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Eamon eamon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eamon</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotreDameBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>根据构造器方式注入，在调用时，每次都要创建实例。那么，如果 Eamon 是全局单例，则我们就只能选择用 Setter 方式来注入，继续修改 Eamon 类的代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author eamon.zhang * @date 2019-09-25 上午11:09 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eamon</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IBook iBook<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBook</span><span class="token punctuation">(</span>IBook iBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>iBook <span class="token operator">=</span> iBook<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        iBook<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>看调用代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Eamon eamon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eamon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">setBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NotreDameBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">setBook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TheOldManAndTheSeaBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eamon<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="最终类图"><a href="#最终类图" class="headerlink" title="最终类图"></a>最终类图</h3><p><img src="https://user-gold-cdn.xitu.io/2019/9/25/16d66fc06832697c?w=1676&amp;h=730&amp;f=png&amp;s=317103" alt="image.png"></p><p><strong>切记</strong>：以抽象为基准比以细节为基准搭建起来的架构要稳定得多，因此大家在拿到需求之后，要面向接口编程，先顶层再细节来设计代码结构。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>文中部分内容参考网络！</p><p>封面图源网络，侵删！</p><p>内容为原创，转发请注明出处！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-导读</title>
      <link href="/posts/cef09865.html"/>
      <url>/posts/cef09865.html</url>
      
        <content type="html"><![CDATA[<p>其实不用设计模式并非不可以，但是用好设计模式能帮助我们更好地解决实际问题。</p><p>设计模式天天都在用，但自己却无感知。</p><a id="more"></a><p>本系列文章，初衷是为了记录日常经常使用的设计模式，也给学习设计模式的同学们提供参考和查阅。</p><p>文章内容有自己的理解，也有参考网络，如有侵犯，请告知删除。</p><h1 id="学习设计模式的重要性"><a href="#学习设计模式的重要性" class="headerlink" title="学习设计模式的重要性"></a>学习设计模式的重要性</h1><p>设计模式最重要的是解耦。</p><p>学习设计模式是如何总结经验的，把经验为自己所用。</p><p>学设计模式也是锻炼将业务需求转换技术实现的一种非常有效的方式。</p><h1 id="设计模式的基石"><a href="#设计模式的基石" class="headerlink" title="设计模式的基石"></a>设计模式的基石</h1><p>我们在学习设计模式之前，建议大家，一定要掌握好设计模式的几大原则，《设计模式之禅》一书中开篇就是讲的是设计原则；</p><p>所以在本篇文章中，在这里先对设计原则做一个回顾和总结。</p><table><thead><tr><th>设计原则</th><th>解释</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开放，对修改关闭。</td></tr><tr><td>依赖倒置原则</td><td>通过抽象使各个类或者模块不相互影响，实现松耦合。</td></tr><tr><td>单一职责原则</td><td>一个类、接口、方法只做一件事。</td></tr><tr><td>接口隔离原则</td><td>尽量保证接口的纯洁性，客户端不应该依赖不需要的接口。</td></tr><tr><td>迪米特法则</td><td>又叫最少知道原则，一个类对其所依赖的类知道得越少越好。</td></tr><tr><td>里氏替换原则</td><td>子类可以扩展父类的功能但不能改变父类原有的功能。</td></tr><tr><td>合成复用原则</td><td>尽量使用对象组合、聚合，而不使用继承关系达到代码复用的目的。</td></tr></tbody></table><h1 id="经典框架都在用设计模式解决问题"><a href="#经典框架都在用设计模式解决问题" class="headerlink" title="经典框架都在用设计模式解决问题"></a>经典框架都在用设计模式解决问题</h1><p>Spring 就是一个把设计模式用得淋漓尽致的经典框架，其实从类的命名就能看出来，我<br>来一一列举：</p><table><thead><tr><th>设计模式名称</th><th>举例</th></tr></thead><tbody><tr><td>工厂模式</td><td>BeanFactory</td></tr><tr><td>装饰器模式</td><td>BeanWrapper</td></tr><tr><td>代理模式</td><td>AopProxy</td></tr><tr><td>委派模式</td><td>DispatcherServlet</td></tr><tr><td>策略模式</td><td>HandlerMapping</td></tr><tr><td>适配器模式</td><td>HandlerAdapter</td></tr><tr><td>模板模式</td><td>JdbcTemplate</td></tr><tr><td>观察者模式</td><td>ContextLoaderListener</td></tr></tbody></table><h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><table style="border-collapse: collapse;border:1px solid #f6f6f6;">    <thead>        <tr>            <th>类型</th>            <th>名称</th>            <th>英文</th>        </tr>    </thead>    <tbody>    <tr>        <td rowspan="3">创建型模式</td>        <td>工厂模式</td>        <td>Factory Patterns</td>    </tr>    <tr>        <td>单例模式</td>        <td>Singleton Pattern</td>    </tr>    <tr>        <td>原型模式</td>        <td>Prototype Pattern</td>    </tr>    <tr>        <td rowspan="3">结构型模式</td>        <td>适配器模式</td>        <td>Prototype Pattern</td>    </tr>    <tr>        <td>装饰器模式</td>        <td>Decorator Pattern</td>    </tr>    <tr>        <td>代理模式</td>        <td>Proxy Pattern</td>    </tr>    <tr>        <td rowspan="4">行为型模式</td>        <td>策略模式</td>        <td>Strategy Pattern</td>    </tr>    <tr>        <td>模板模式</td>        <td>Template Pattern</td>    </tr>    <tr>        <td>委派模式</td>        <td>Delegate Pattern</td>    </tr>    <tr>        <td>观察者模式</td>        <td>Observer Pattern</td>    </tr>    </tbody></table><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>需要特别声明的是，设计模式从来都不是单个设计模式独立使用的。在实际应用中，通常是多个设计模式混合使用，你中有我，我中有你。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
